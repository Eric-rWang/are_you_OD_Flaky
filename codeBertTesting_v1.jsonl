{"code": "def test_string_conversion(self):\n        \"\"\"Test errors when converting to a string.\"\"\"\n        self.assertEqual(str(ucal.evaluate('1/m')), '1 m^-1')\n        self.assertEqual(str(ucal.evaluate('m^2')), '1 m^2')\n        self.assertEqual(str(ucal.evaluate('m^1.5')), '1 m^1.5')", "od": 0}
{"code": "def test_invalid_equation(self):\n        \"\"\"Test errors when parsing invalid equations.\"\"\"\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '%1')", "od": 0}
{"code": "def test_quantity_equality(self):\n        \"\"\"Test Quantity.__eq__ function.\"\"\"\n        self.assertEqual(ucal.ucal.calculate('1m'),\n                         ucal.ucal.calculate('1m'))", "od": 0}
{"code": "def test_quantity_addition(self):\n        \"\"\"Test for proper Quantity.__add__ functionality.\"\"\"\n        x = ucal.ucal.calculate('1m')\n        self.assertEqual(str(x + x), '2 m')", "od": 0}
{"code": "def test_quantity_subtraction(self):\n        \"\"\"Test for proper Quantity.__sub__ functionality.\"\"\"\n        x = ucal.ucal.calculate('1m')\n        self.assertEqual(str(x - x), '0 m')", "od": 0}
{"code": "def test_quantity_addition_error(self):\n        \"\"\"Test for proper Quantity.__add__ error checks.\"\"\"\n        x = ucal.ucal.calculate('1m')\n        y = ucal.ucal.calculate('0')\n        self.assertRaises(ucal.QuantityError, x.__add__, y)", "od": 0}
{"code": "def test_quantity_subtraction_error(self):\n        \"\"\"Test for proper Quantity.__sub__ error checks.\"\"\"\n        x = ucal.ucal.calculate('1m')\n        y = ucal.ucal.calculate('0')\n        self.assertRaises(ucal.QuantityError, x.__sub__, y)", "od": 0}
{"code": "def test_invalid_values(self):\n        \"\"\"Test errors when parsing invalid values.\"\"\"\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '+++1')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '+')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '.')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, 'e10')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '1ee10')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '1E+-1')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '!67')", "od": 0}
{"code": "def test_basic_value_comprehension(self):\n        \"\"\"Test for valid value definitions.\"\"\"\n        self.assertEqual(ucal.evaluate('1'), '1')\n        self.assertEqual(ucal.evaluate('123457890'), '123457890')\n        self.assertEqual(ucal.evaluate('001'), '1')\n        self.assertEqual(ucal.evaluate('.1'), '0.1')\n        self.assertEqual(ucal.evaluate('+1'), '1')\n        self.assertEqual(ucal.evaluate('-1'), '-1')\n        self.assertEqual(ucal.evaluate('1e3'), '1000')", "od": 0}
{"code": "def test_nested_prefix_comprehension(self):\n        \"\"\"Test for valid value definitions.\"\"\"\n        self.assertEqual(ucal.evaluate('1+-2'), '-1')", "od": 0}
{"code": "def test_output_number_formatting(self):\n        \"\"\"Test for desired output format for numbers.\"\"\"\n        self.assertEqual(ucal.evaluate('0.1234567890'), '0.123456789')\n        self.assertEqual(ucal.evaluate('1e9'), '1000000000')\n        self.assertEqual(ucal.evaluate('+1e+9'), '1000000000')\n        self.assertEqual(ucal.evaluate('-1e-3'), '-0.001')\n        self.assertEqual(ucal.evaluate('1E6'), '1000000')", "od": 0}
{"code": "def test_arithmetic(self):\n        \"\"\"Test basic arithmetic operations.\"\"\"\n        self.assertEqual(ucal.evaluate('1+2'), '3')\n        self.assertEqual(ucal.evaluate('1-2'), '-1')\n        self.assertEqual(ucal.evaluate('3*4'), '12')\n        self.assertEqual(ucal.evaluate('8/2'), '4')\n        self.assertEqual(ucal.evaluate('--1'), '1')", "od": 0}
{"code": "def test_decimal_comprehension(self):\n        \"\"\"Test decimal number comprehension.\"\"\"\n        self.assertEqual(ucal.evaluate('0'), '0')\n        self.assertEqual(ucal.evaluate('0123'), '123')\n        self.assertEqual(ucal.evaluate('+1e555'), '1e555')\n        self.assertEqual(ucal.evaluate('1e-67'), '1e-67')", "od": 0}
{"code": "def test_binary_comprehension(self):\n        \"\"\"Test binary number comprehension.\"\"\"\n        self.assertEqual(ucal.evaluate('0B0'), '0')\n        self.assertEqual(ucal.evaluate('0b0'), '0')\n        self.assertEqual(ucal.evaluate('0b11'), '3')\n        self.assertEqual(ucal.evaluate('0b1111'), '15')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '0b')", "od": 0}
{"code": "def test_hexadecimal_comprehension(self):\n        \"\"\"Test hexadecimal number comprehension.\"\"\"\n        self.assertEqual(ucal.evaluate('0x0'), '0')\n        self.assertEqual(ucal.evaluate('0X0'), '0')\n        self.assertEqual(ucal.evaluate('0x123'), '291')\n        self.assertEqual(ucal.evaluate('0xAbCdEf'), '11259375')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '0x')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '0xAG')", "od": 0}
{"code": "def test_hexadecimal_errors(self):\n        \"\"\"Test hexadecimal number error detection.\"\"\"\n        self.assertIn('only integers', ucal.interpret('1m in hex'))", "od": 0}
{"code": "def test_binary_errors(self):\n        \"\"\"Test binary number error detection.\"\"\"\n        self.assertIn('only integers', ucal.interpret('1m in bin'))", "od": 0}
{"code": "def test_hexadecimal_conversion(self):\n        \"\"\"Test conversion to hexademical numbers.\"\"\"\n        self.assertEqual(ucal.interpret('67 in hex'), '0x43')\n        self.assertEqual(ucal.interpret('123 in hex'), '0x7B')", "od": 0}
{"code": "def test_binary_conversion(self):\n        \"\"\"Test conversion to hexademical numbers.\"\"\"\n        self.assertEqual(ucal.interpret('67 in bin'), '0b1000011')", "od": 0}
{"code": "def test_output_units(self):\n        \"\"\"Test automatic output conversions.\"\"\"\n        self.assertEqual(ucal.evaluate('1A*Ohm'), '1 V')\n        self.assertEqual(ucal.evaluate('1/s'), '1 Hz')", "od": 0}
{"code": "def test_target_simple_units(self):\n        \"\"\"Test conversion to specified units.\"\"\"\n        self.assertEqual(ucal.interpret('1m to mm'), '1000 mm')\n        self.assertEqual(ucal.interpret('1m as mm'), '1000 mm')\n        self.assertEqual(ucal.interpret('1m in mm'), '1000 mm')", "od": 0}
{"code": "def test_target_compound_units(self):\n        \"\"\"Test conversion to specified units.\"\"\"\n        self.assertEqual(ucal.interpret('1in^2 to mm^2'), '645.16 mm^2')", "od": 0}
{"code": "def test_target_units_fallback(self):\n        \"\"\"Test fallback conversion if target units are invalid.\"\"\"\n        self.assertEqual(ucal.interpret('1 in kg'), '0.0254 kg m')", "od": 0}
{"code": "def test_factorial(self):\n        \"\"\"Test the factorial postfix operator.\"\"\"\n        self.assertEqual(ucal.evaluate('0!'), '1')\n        self.assertEqual(ucal.evaluate('1!'), '1')\n        self.assertEqual(ucal.evaluate('2!'), '2')\n        self.assertEqual(ucal.evaluate('5!'), '120')\n        self.assertEqual(ucal.evaluate('18!'), '6402373705728000')", "od": 0}
{"code": "def test_factorial_error(self):\n        \"\"\"Test invalid uses of the factorial postfix operator.\"\"\"\n        self.assertRaises(ucal.QuantityError, ucal.evaluate, '(1m)!')\n        self.assertRaises(ucal.QuantityError, ucal.evaluate, '1.5!')\n        self.assertRaises(ucal.QuantityError, ucal.evaluate, '(-1)!')", "od": 0}
{"code": "def test_percent(self):\n        \"\"\"Test percentage evaluation.\"\"\"\n        self.assertEqual(ucal.evaluate('100%'), '1')\n        self.assertEqual(ucal.evaluate('50%'), '0.5')\n        self.assertEqual(ucal.evaluate('25%'), '0.25')", "od": 0}
{"code": "def test_unbalanced_parentheses(self):\n        \"\"\"Test for unbalanced parentheses.\"\"\"\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '1)')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '(1')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '(1))')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '((1)')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, ')1(')", "od": 0}
{"code": "def test_balanced_parentheses(self):\n        \"\"\"Test for balanced parentheses.\"\"\"\n        self.assertEqual(ucal.evaluate('(1)'), '1')\n        self.assertEqual(ucal.evaluate('((1))'), '1')\n        self.assertEqual(ucal.evaluate('(((((1)))))'), '1')", "od": 0}
{"code": "def test_invalid_implicit_multiplication(self):\n        \"\"\"Test invalid implicit multiplication.\"\"\"\n        # implicit multiplication not allowed between two values\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '1 2')\n        # not allowed between left variable and right value\n        self.assertRaises(ucal.ParserError, ucal.evaluate, 'm 1')\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '1 m 1')", "od": 0}
{"code": "def test_implicit_multiplication(self):\n        \"\"\"Test for valid implicit multiplication.\"\"\"\n        self.assertEqual(ucal.evaluate('1 m'), '1 m')\n        self.assertEqual(ucal.evaluate('m m'), '1 m^2')\n        self.assertEqual(ucal.evaluate('(1) m'), '1 m')\n        self.assertEqual(ucal.evaluate('(1)(1)'), '1')", "od": 0}
{"code": "def test_power_evaluation_order(self):\n        \"\"\"Test order of power evaluation.\"\"\"\n        self.assertEqual(ucal.evaluate('3^3^3'), '7625597484987')", "od": 0}
{"code": "def test_evaluation_order_2(self):\n        \"\"\"Test order of power/factorial evaluations.\"\"\"\n        self.assertEqual(ucal.evaluate('3^2!'), '9')", "od": 0}
{"code": "def test_unrecognized_function(self):\n        \"\"\"Test for an unrecognized function function.\"\"\"\n        self.assertRaises(ucal.ParserError,\n                          ucal.evaluate,\n                          'thisIsUnrecognized(1)')", "od": 0}
{"code": "def test_function_sqrt(self):\n        \"\"\"Test sqrt function.\"\"\"\n        self.assertEqual(ucal.evaluate('sqrt(4)'), '2')", "od": 0}
{"code": "def test_function_exp(self):\n        \"\"\"Test exp function.\"\"\"\n        self.assertEqual(ucal.evaluate('exp(0)'), '1')\n        self.assertRaises(ucal.QuantityError, ucal.evaluate, 'exp(1m)')", "od": 0}
{"code": "def test_function_abs(self):\n        \"\"\"Test abs function.\"\"\"\n        self.assertEqual(ucal.evaluate('abs(1)'), '1')\n        self.assertEqual(ucal.evaluate('abs(-1)'), '1')\n        self.assertEqual(ucal.evaluate('abs(0)'), '0')\n        self.assertEqual(ucal.evaluate('abs(1 m)'), '1 m')", "od": 0}
{"code": "def test_function_ln(self):\n        \"\"\"Test ln function.\"\"\"\n        self.assertEqual(ucal.evaluate('ln(exp(1))'), '1')\n        self.assertEqual(ucal.evaluate('ln(1)'), '0')\n        self.assertRaises(ucal.QuantityError, ucal.evaluate, 'ln(1m)')", "od": 1}
{"code": "def test_function_log(self):\n        \"\"\"Test log function.\"\"\"\n        self.assertEqual(ucal.evaluate('log(exp(1))'), '1')\n        self.assertEqual(ucal.evaluate('log(1)'), '0')\n        self.assertRaises(ucal.QuantityError, ucal.evaluate, 'log(1m)')", "od": 1}
{"code": "def test_function_log10(self):\n        \"\"\"Test log10 function.\"\"\"\n        self.assertEqual(ucal.evaluate('log10(1)'), '0')\n        self.assertEqual(ucal.evaluate('log10(10)'), '1')\n        self.assertEqual(ucal.evaluate('log10(100)'), '2')\n        self.assertRaises(ucal.QuantityError, ucal.evaluate, 'log10(1m)')", "od": 0}
{"code": "def test_mod(self):\n        \"\"\"Test __mod__ function.\"\"\"\n        self.assertEqual(ucal.evaluate('1 % 7'), '1')\n        self.assertEqual(ucal.evaluate('7 % 1'), '0')\n        self.assertEqual(ucal.evaluate('4 % 2.5'), '1.5')\n        self.assertRaises(ucal.QuantityError, ucal.evaluate, '(1m) % 2')", "od": 0}
{"code": "def test_pow(self):\n        \"\"\"Test __pow__ function.\"\"\"\n        self.assertEqual(ucal.evaluate('1 ^ 7'), '1')\n        self.assertEqual(ucal.evaluate('2 ^ 5'), '32')\n        self.assertRaises(ucal.QuantityError, ucal.evaluate, '1 ^ (1m)')", "od": 0}
{"code": "def test_get_measure(self):\n        \"\"\"Test ucal.get_measure.\"\"\"\n        self.assertEqual(ucal.ucal.to_string(ucal.ucal.calculate('1m'),\n                                             include_measure=True),\n                         '1 m [length]')\n        self.assertEqual(ucal.ucal.to_string(ucal.ucal.calculate('1'),\n                                             include_measure=True),\n                         '1')", "od": 0}
{"code": "def test_evaluate_to_units(self):\n        \"\"\"Test ucal.get_measure.\"\"\"\n        self.assertEqual(ucal.evaluate('1ft', units='ft'), ('1', 'ft'))\n        self.assertRaises(ucal.ParserError, ucal.evaluate, '1ft', units='s')", "od": 0}
{"code": "def test_get_runtime_command(self, find_executable_mock):\n        utils.CONTAINER_RUNTIME_COMMAND = None\n        find_executable_mock.side_effect = \"done\"\n        res = utils.get_runtime_command()\n        self.assertEqual(res, utils.DOCKER)\n        find_executable_mock.side_effect = [None, \"done\"]\n        utils.CONTAINER_RUNTIME_COMMAND = None\n        res = utils.get_runtime_command()\n        self.assertEqual(res, utils.PODMAN)\n        with self.assertRaises(Exception):\n            find_executable_mock.side_effect = [None, None]\n            utils.CONTAINER_RUNTIME_COMMAND = None\n            utils.get_runtime_command()\n        utils.CONTAINER_RUNTIME_COMMAND = utils.DOCKER\n        res = utils.get_runtime_command()\n        self.assertEqual(res, utils.DOCKER)", "od": 0}
{"code": "def test_create_path_and_add_data(self, path_exists_mock, makedir_mock, open_mock):\n        test_dir = \"/home/test\"\n        test_file = os.path.join(test_dir, \"test_file.txt\")\n        path_exists_mock.return_value = False\n        utils.create_path_and_add_data(test_file, \"\", False)\n        makedir_mock.assert_called_once_with(test_dir)\n        open_mock.assert_not_called()\n\n        makedir_mock.reset_mock()\n        test_file = os.path.join(test_dir, \"test_file.txt\")\n        path_exists_mock.return_value = True\n        utils.create_path_and_add_data(test_file, \"\", False)\n        makedir_mock.assert_not_called()\n        open_mock.assert_not_called()\n\n        test_file = os.path.join(test_dir, \"test_file.txt\")\n        path_exists_mock.return_value = True\n        utils.create_path_and_add_data(test_file, \"\", True)\n        makedir_mock.assert_not_called()\n        open_mock.assert_called_once_with(test_file, \"w\")", "od": 0}
{"code": "def test_get_hash_with_default_argument(self, is_git_repository_mock, check_output_mock):\n        git_hash = git.get_hash()\n        is_git_repository_mock.assert_called_once()\n        check_output_mock.assert_called_once_with(['git', 'rev-parse', 'HEAD'])\n        self.assertEqual(git_hash, GIT_HASH_FULL.decode('utf-8'))", "od": 0}
{"code": "def test_get_full_hash(self, is_git_repository_mock, check_output_mock):\n        git_hash = git.get_hash(short=False)\n        is_git_repository_mock.assert_called_once()\n        check_output_mock.assert_called_once_with(['git', 'rev-parse', 'HEAD'])\n        self.assertEqual(git_hash, GIT_HASH_FULL.decode('utf-8'))", "od": 0}
{"code": "def test_get_short_hash(self, is_git_repository_mock, check_output_mock):\n        git_hash = git.get_hash(short=True)\n        is_git_repository_mock.assert_called_once()\n        check_output_mock.assert_called_once_with(['git', 'rev-parse', '--short', 'HEAD'])\n        self.assertEqual(git_hash, GIT_HASH_SHORT.decode('utf-8'))", "od": 0}
{"code": "def test_not_in_git_project(self, is_git_repository_mock):\n        self.assertEqual(git.get_hash(), 'none')\n        is_git_repository_mock.assert_called_once()", "od": 0}
{"code": "def test_should_be_in_git_project_os_path(self, exists_mock):\n        self.assertTrue(git.is_git_repository())\n        exists_mock.assert_called_once_with('.git')", "od": 0}
{"code": "def test_should_be_in_git_project_git(self, exists_mock, call_mock):\n        self.assertTrue(git.is_git_repository())\n        exists_mock.assert_called_once_with('.git')\n        call_mock.assert_called_once_with(['git', 'rev-parse', '--is-inside-work-tree'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)", "od": 0}
{"code": "def test_should_not_be_in_git_project(self, exists_mock, call_mock):\n        self.assertFalse(git.is_git_repository())\n        exists_mock.assert_called_once_with('.git')\n        call_mock.assert_called_once_with(['git', 'rev-parse', '--is-inside-work-tree'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)", "od": 0}
{"code": "def test_run_simple_command_not_nested(self, popen_mock):\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        command = ['pwd']\n        runner.run(command)\n        popen_mock.assert_called_once_with([self.runtime] + command)", "od": 0}
{"code": "def test_run_complex_command_not_nested(self, popen_mock):\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        command = ['ls -l']\n        runner.run(command)\n        popen_mock.assert_called_once_with([self.runtime] + command)", "od": 0}
{"code": "def test_run_simple_command_nested_network_exist(self, resource_filename_mock, check_output_mock,\n                                                     popen_mock, grp_getgrnam_mock, os_getuid_mock):\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        check_output_mock.side_effect = [self.NET_LS, '']\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        grp_getgrnam_mock.return_value.gr_gid = 978\n        os_getuid_mock.return_value = USER_ID\n        command = ['pwd']\n        runner.run(command, FQDN_IMAGE)\n        expected_nested_command = [\n            'docker', 'run',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', get_default_net(),\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '-e', 'SKIPPER_DOCKER_GID=978',\n            '-v', get_volume_mapping('%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.docker:%(homedir)s/.docker:rw' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('/etc/docker:/etc/docker:ro'),\n            '-v', get_volume_mapping('%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR)),\n            '-v', get_volume_mapping('/var/run/docker.sock:/var/run/docker.sock:rw'),\n            '-v', get_volume_mapping('entrypoint.sh:/opt/skipper/skipper-entrypoint.sh'),\n            '-v', get_volume_mapping('/var/lib/osmosis:/var/lib/osmosis:rw'),\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            command[0]\n        ]\n        popen_mock.assert_called_once_with(expected_nested_command)", "od": 0}
{"code": "def test_run_simple_command_nested_network_not_exist(self, resource_filename_mock,\n                                                         check_output_mock, popen_mock, grp_getgrnam_mock, os_getuid_mock):\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        check_output_mock.side_effect = [self.NET_NOT_EXISTS, 'new-net-hash', '']\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        grp_getgrnam_mock.return_value.gr_gid = 978\n        os_getuid_mock.return_value = USER_ID\n        command = ['pwd']\n        runner.run(command, FQDN_IMAGE)\n        expected_nested_command = [\n            'docker', 'run',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', get_default_net(),\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '-e', 'SKIPPER_DOCKER_GID=978',\n            '-v', get_volume_mapping('%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.docker:%(homedir)s/.docker:rw' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('/etc/docker:/etc/docker:ro'),\n            '-v', get_volume_mapping('%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR)),\n            '-v', get_volume_mapping('/var/run/docker.sock:/var/run/docker.sock:rw'),\n            '-v', get_volume_mapping('entrypoint.sh:/opt/skipper/skipper-entrypoint.sh'),\n            '-v', get_volume_mapping('/var/lib/osmosis:/var/lib/osmosis:rw'),\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            command[0]\n        ]\n        popen_mock.assert_called_once_with(expected_nested_command)", "od": 0}
{"code": "def test_run_simple_command_nested_with_env(self, resource_filename_mock, check_output_mock, popen_mock, grp_getgrnam_mock, os_getuid_mock):\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        check_output_mock.side_effect = [self.NET_LS, '']\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        grp_getgrnam_mock.return_value.gr_gid = 978\n        os_getuid_mock.return_value = USER_ID\n        command = ['pwd']\n        runner.run(command, FQDN_IMAGE, ENV)\n        expected_docker_command = [\n            'docker', 'run',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', get_default_net(),\n            '-e', 'KEY1=VAL1',\n            '-e', 'KEY2=VAL2',\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '-e', 'SKIPPER_DOCKER_GID=978',\n            '-v', get_volume_mapping('%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.docker:%(homedir)s/.docker:rw' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('/etc/docker:/etc/docker:ro'),\n            '-v', get_volume_mapping('%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR)),\n            '-v', get_volume_mapping('/var/run/docker.sock:/var/run/docker.sock:rw'),\n            '-v', get_volume_mapping('entrypoint.sh:/opt/skipper/skipper-entrypoint.sh'),\n            '-v', get_volume_mapping('/var/lib/osmosis:/var/lib/osmosis:rw'),\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            command[0]\n        ]\n        popen_mock.assert_called_once_with(expected_docker_command)", "od": 0}
{"code": "def test_run_simple_command_nested_with_env_file(\n            self, resource_filename_mock, check_output_mock, popen_mock,\n            grp_getgrnam_mock, os_getuid_mock\n    ):\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        check_output_mock.side_effect = [self.NET_LS, '']\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb',\n                                                               'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        grp_getgrnam_mock.return_value.gr_gid = 978\n        os_getuid_mock.return_value = USER_ID\n        command = ['pwd']\n        runner.run(command, FQDN_IMAGE, env_file=[ENV_FILE_PATH])\n        expected_docker_command = [\n            'docker', 'run',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', get_default_net(),\n            '--env-file', ENV_FILE_PATH,\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '-e', 'SKIPPER_DOCKER_GID=978',\n            '-v', get_volume_mapping('%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(\n                homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(\n                homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.docker:%(homedir)s/.docker:rw' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('/etc/docker:/etc/docker:ro'),\n            '-v', get_volume_mapping('%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR)),\n            '-v', get_volume_mapping('/var/run/docker.sock:/var/run/docker.sock:rw'),\n            '-v', get_volume_mapping('entrypoint.sh:/opt/skipper/skipper-entrypoint.sh'),\n            '-v', get_volume_mapping('/var/lib/osmosis:/var/lib/osmosis:rw'),\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            command[0]\n        ]\n        popen_mock.assert_called_once_with(expected_docker_command)", "od": 0}
{"code": "def test_run_simple_command_nested_with_multiple_env_files(\n            self, resource_filename_mock, check_output_mock, popen_mock,\n            grp_getgrnam_mock, os_getuid_mock\n    ):\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        check_output_mock.side_effect = [self.NET_LS, '']\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb',\n                                                               'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        grp_getgrnam_mock.return_value.gr_gid = 978\n        os_getuid_mock.return_value = USER_ID\n        command = ['pwd']\n        runner.run(command, FQDN_IMAGE, env_file=ENV_FILES)\n        expected_docker_command = [\n            'docker', 'run',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', 'host',\n            '--env-file', ENV_FILE_PATH,\n            '--env-file', ENV_FILE_PATH,\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '-e', 'SKIPPER_DOCKER_GID=978',\n            '-v', '%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(\n                homedir=HOME_DIR),\n            '-v', '%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(\n                homedir=HOME_DIR),\n            '-v', get_volume_mapping('%(homedir)s/.docker:%(homedir)s/.docker:rw' % dict(\n                homedir=HOME_DIR)),\n            '-v', '/etc/docker:/etc/docker:ro',\n            '-v', '%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR),\n            '-v', '/var/run/docker.sock:/var/run/docker.sock:rw',\n            '-v', 'entrypoint.sh:/opt/skipper/skipper-entrypoint.sh',\n            '-v', '/var/lib/osmosis:/var/lib/osmosis:rw',\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            command[0]\n        ]\n        popen_mock.assert_called_once_with(expected_docker_command)", "od": 0}
{"code": "def test_run_simple_command_nested_interactive(self, resource_filename_mock,\n                                                   check_output_mock, popen_mock, grp_getgrnam_mock, os_getuid_mock):\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        check_output_mock.side_effect = [self.NET_LS, '']\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        grp_getgrnam_mock.return_value.gr_gid = 978\n        os_getuid_mock.return_value = USER_ID\n        command = ['pwd']\n        runner.run(command, FQDN_IMAGE, interactive=True)\n\n        expected_nested_command = [\n            'docker', 'run',\n            '-i',\n            '-e', 'SKIPPER_INTERACTIVE=True',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', get_default_net(),\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '-e', 'SKIPPER_DOCKER_GID=978',\n            '-v', get_volume_mapping('%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.docker:%(homedir)s/.docker:rw' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('/etc/docker:/etc/docker:ro'),\n            '-v', get_volume_mapping('%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR)),\n            '-v', get_volume_mapping('/var/run/docker.sock:/var/run/docker.sock:rw'),\n            '-v', get_volume_mapping('entrypoint.sh:/opt/skipper/skipper-entrypoint.sh'),\n            '-v', get_volume_mapping('/var/lib/osmosis:/var/lib/osmosis:rw'),\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            command[0]\n        ]\n        popen_mock.assert_called_once_with(expected_nested_command)", "od": 0}
{"code": "def test_run_complex_command_nested(self, resource_filename_mock, check_output_mock, popen_mock, grp_getgrnam_mock, os_getuid_mock):\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        check_output_mock.side_effect = [self.NET_LS, '']\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        grp_getgrnam_mock.return_value.gr_gid = 978\n        os_getuid_mock.return_value = USER_ID\n        command = ['ls', '-l']\n        runner.run(command, FQDN_IMAGE)\n        expected_nested_command = [\n            'docker', 'run',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', get_default_net(),\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '-e', 'SKIPPER_DOCKER_GID=978',\n            '-v', get_volume_mapping('%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.docker:%(homedir)s/.docker:rw' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('/etc/docker:/etc/docker:ro'),\n            '-v', get_volume_mapping('%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR)),\n            '-v', get_volume_mapping('/var/run/docker.sock:/var/run/docker.sock:rw'),\n            '-v', get_volume_mapping('entrypoint.sh:/opt/skipper/skipper-entrypoint.sh'),\n            '-v', get_volume_mapping('/var/lib/osmosis:/var/lib/osmosis:rw'),\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            ' '.join(command)\n        ]\n        popen_mock.assert_called_once_with(expected_nested_command)", "od": 0}
{"code": "def test_run_complex_command_nested_with_env(self, resource_filename_mock, check_output_mock, popen_mock, grp_getgrnam_mock, os_getuid_mock):\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        check_output_mock.side_effect = [self.NET_LS, '']\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        grp_getgrnam_mock.return_value.gr_gid = 978\n        os_getuid_mock.return_value = USER_ID\n        command = ['ls', '-l']\n        runner.run(command, FQDN_IMAGE, ENV, name=\"test\")\n        expected_nested_command = [\n            'docker', 'run',\n            '--name',\n            'test',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', get_default_net(),\n            '-e', 'KEY1=VAL1',\n            '-e', 'KEY2=VAL2',\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '-e', 'SKIPPER_DOCKER_GID=978',\n            '-v', get_volume_mapping('%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.docker:%(homedir)s/.docker:rw' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('/etc/docker:/etc/docker:ro'),\n            '-v', get_volume_mapping('%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR)),\n            '-v', get_volume_mapping('/var/run/docker.sock:/var/run/docker.sock:rw'),\n            '-v', get_volume_mapping('entrypoint.sh:/opt/skipper/skipper-entrypoint.sh'),\n            '-v', get_volume_mapping('/var/lib/osmosis:/var/lib/osmosis:rw'),\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            ' '.join(command)\n        ]\n        popen_mock.assert_called_once_with(expected_nested_command)", "od": 0}
{"code": "def test_run_complex_command_nested_with_special_case_verification(self, resource_filename_mock, check_output_mock,\n                                                                       popen_mock, grp_getgrnam_mock, os_getuid_mock,\n                                                                       path_exists_mock, create_path_and_add_data_mock):\n\n        path_exists_mock.return_value = False\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        check_output_mock.side_effect = [self.NET_LS, '']\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        grp_getgrnam_mock.return_value.gr_gid = 978\n        os_getuid_mock.return_value = USER_ID\n        command = ['ls', '-l']\n        volumes = []\n        runner.run(command, FQDN_IMAGE, ENV, name=\"test\", volumes=volumes)\n        expected_nested_command = [\n            'docker', 'run',\n            '--name',\n            'test',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', get_default_net(),\n            '-e', 'KEY1=VAL1',\n            '-e', 'KEY2=VAL2',\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '-e', 'SKIPPER_DOCKER_GID=978',\n            '-v', '%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(homedir=HOME_DIR),\n            '-v', '%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(homedir=HOME_DIR),\n            '-v', '%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR),\n            '-v', '/var/run/docker.sock:/var/run/docker.sock:rw',\n            '-v', 'entrypoint.sh:/opt/skipper/skipper-entrypoint.sh',\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            ' '.join(command)\n        ]\n        calls = [\n            mock.call(full_path=\"/home/adir/.gitconfig\", data=\"\", is_file=True)\n        ]\n        create_path_and_add_data_mock.assert_has_calls(calls, any_order=True)\n        popen_mock.assert_called_once_with(expected_nested_command)", "od": 0}
{"code": "def test_handle_volumes_bind_mount_with_bad_volume_mount(self):\n        docker_cmd = ['docker', 'run']\n        volumes = ['bad volume mount']\n        with self.assertRaises(ValueError):\n            runner.handle_volumes_bind_mount(docker_cmd, HOME_DIR, volumes, WORKDIR)", "od": 0}
{"code": "def test_build_basic_usage(self):\n        \"\"\"Testing the basic usage of the 'build' function.\"\"\"\n\n        runner = mock.MagicMock()\n        runner.run.return_value = 0\n\n        options = BuildOptions(\n            image=Image(\n                name=\"test\",\n                tag=\"test\",\n                dockerfile=\"test\",\n            ),\n            container_context=(),\n        )\n        expected_cmd = [\n            \"build\",\n            \"--network=host\",\n            \"-f\",\n            options.image.dockerfile,\n            \"-t\",\n            options.image.local,\n            \".\",\n        ]\n\n        result = builder.build(options, runner.run, logging.getLogger())\n        self.assertEqual(0, result)\n        runner.run.assert_called_once_with(expected_cmd)", "od": 0}
{"code": "def test_build_with_build_args(self):\n        \"\"\"Testing the 'build' function with build args.\"\"\"\n\n        runner = mock.MagicMock()\n        runner.run.return_value = 0\n\n        options = BuildOptions(\n            image=Image(\n                name=\"test\",\n                tag=\"test\",\n                dockerfile=\"test\",\n            ),\n            container_context=(),\n            build_args=[\"test1\", \"test2\"],\n        )\n        expected_cmd = [\n            \"build\",\n            \"--network=host\",\n            \"--build-arg\",\n            \"test1\",\n            \"--build-arg\",\n            \"test2\",\n            \"-f\",\n            options.image.dockerfile,\n            \"-t\",\n            options.image.local,\n            \".\",\n        ]\n\n        result = builder.build(options, runner.run, logging.getLogger())\n        self.assertEqual(0, result)\n        runner.run.assert_called_once_with(expected_cmd)", "od": 0}
{"code": "def test_build_with_build_contexts(self):\n        \"\"\"Testing the 'build' function with build contexts.\"\"\"\n\n        runner = mock.MagicMock()\n        runner.run.return_value = 0\n\n        options = BuildOptions(\n            image=Image(\n                name=\"test\",\n                tag=\"test\",\n                dockerfile=\"test\",\n            ),\n            container_context=(),\n            build_contexts=[\"test1\", \"test2\"],\n        )\n        expected_cmd = [\n            \"build\",\n            \"--network=host\",\n            \"--build-context\",\n            \"test1\",\n            \"--build-context\",\n            \"test2\",\n            \"-f\",\n            options.image.dockerfile,\n            \"-t\",\n            options.image.local,\n            \".\",\n        ]\n\n        result = builder.build(options, runner.run, logging.getLogger())\n        self.assertEqual(0, result)\n        runner.run.assert_called_once_with(expected_cmd)", "od": 0}
{"code": "def test_build_with_use_cache(self):\n        \"\"\"Testing the 'build' function with use cache.\"\"\"\n\n        runner = mock.MagicMock()\n        runner.run.return_value = 0\n\n        options = BuildOptions(\n            image=Image(\n                name=\"test\",\n                tag=\"test\",\n                dockerfile=\"test\",\n            ),\n            container_context=(),\n            use_cache=True,\n        )\n        expected_cmds = [\n            mock.call(\n                [\n                    \"build\",\n                    \"--network=host\",\n                    \"--cache-from\",\n                    options.image.cache_fqdn,\n                    \"-f\",\n                    options.image.dockerfile,\n                    \"-t\",\n                    options.image.local,\n                    \".\",\n                ]\n            ),\n            mock.call([\"pull\", options.image.cache_fqdn]),\n            mock.call([\"tag\", options.image.name, options.image.cache_fqdn]),\n        ]\n\n        result = builder.build(options, runner.run, logging.getLogger())\n        self.assertEqual(0, result)\n        runner.run.has_calls(expected_cmds)", "od": 0}
{"code": "def test_build_with_options_from_context(self):\n        \"\"\"Testing the 'build' function with options from context.\"\"\"\n\n        runner = mock.MagicMock()\n        runner.run.return_value = 0\n\n        ctx_obj = {\n            \"build_container_image\": \"test\",\n            \"build_container_tag\": \"test\",\n            \"container_context\": (),\n            \"build_contexts\": [\"test1\", \"test2\"],\n            \"build_args\": [\"test1\", \"test2\"],\n            \"use_cache\": True,\n        }\n        expected_cmds = [\n            mock.call(\n                [\n                    \"build\",\n                    \"--network=host\",\n                    \"--cache-from\",\n                    \"test:test\",\n                    \"--build-arg\",\n                    \"test1\",\n                    \"--build-arg\",\n                    \"test2\",\n                    \"--build-context\",\n                    \"test1\",\n                    \"--build-context\",\n                    \"test2\",\n                    \"-f\",\n                    \"test\",\n                    \"-t\",\n                    \"test:test\",\n                    \".\",\n                ]\n            ),\n            mock.call([\"pull\", \"test:test\"]),\n            mock.call([\"tag\", \"test\", \"test:test\"]),\n        ]\n\n        result = builder.build(\n            BuildOptions.from_context_obj(ctx_obj), runner.run, logging.getLogger()\n        )\n        self.assertEqual(0, result)\n        runner.run.has_calls(expected_cmds)", "od": 0}
{"code": "def test_build_fail(self):\n        \"\"\"Testing the 'build' function when the build fails.\"\"\"\n\n        runner = mock.MagicMock()\n        runner.run.return_value = 1\n\n        options = BuildOptions(\n            image=Image(\n                name=\"test\",\n                tag=\"test\",\n                dockerfile=\"test\",\n            ),\n            container_context=(),\n        )\n\n        result = builder.build(options, runner.run, logging.getLogger())\n        self.assertEqual(1, result)\n        runner.run.assert_called_once()", "od": 0}
{"code": "def test_build_fail_without_image_name(self):\n        \"\"\"Testing the 'build' function when the image name is not specified.\"\"\"\n\n        ctx_obj = {\n            \"build_container_tag\": \"test\",\n            \"container_context\": (),\n            \"build_contexts\": [\"test1\", \"test2\"],\n            \"build_args\": [\"test1\", \"test2\"],\n            \"use_cache\": True,\n        }\n\n        self.assertRaises(ValueError, BuildOptions.from_context_obj, ctx_obj)", "od": 0}
{"code": "def test_config_with_env_eval(self):\n        os.environ[\"VAL4\"] = \"val4-evaluation\"\n        defaults = config.load_defaults()\n\n        self.assertEqual(CONFIG_ENV_EVALUATION, defaults.get(\"env\"))\n        self.assertEqual(\n            defaults.get(\"build_container_image\"), SKIPPER_CONF_BUILD_CONTAINER_IMAGE\n        )\n        self.assertEqual(\n            defaults.get(\"build_container_tag\"), SKIPPER_CONF_BUILD_CONTAINER_TAG\n        )", "od": 0}
{"code": "def test_config_with_interpolation(self):\n        defaults = config.load_defaults()\n\n        self.assertEqual(defaults.get(\"env\"), [\"KEY=10\"])\n        self.assertEqual(defaults.get(\"volumes\"), [f'{which(\"cat\")}:/cat'])", "od": 0}
{"code": "def test_config_with_wrong_interpolation(self):\n        with self.assertRaises(ValueError):\n            config.load_defaults()", "od": 0}
{"code": "def test_run_simple_command_not_nested(self, popen_mock):\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        command = ['pwd']\n        runner.run(command)\n        popen_mock.assert_called_once_with([self.runtime] + command)", "od": 0}
{"code": "def test_run_complex_command_not_nested(self, popen_mock):\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        command = ['ls -l']\n        runner.run(command)\n        popen_mock.assert_called_once_with([self.runtime] + command)", "od": 0}
{"code": "def test_run_simple_command_nested_network_exist(self, resource_filename_mock, check_output_mock, popen_mock, os_getuid_mock):\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        os_getuid_mock.return_value = USER_ID\n        command = ['pwd']\n        runner.run(command, FQDN_IMAGE)\n        expected_nested_command = [\n            self.runtime, 'run',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', get_default_net(),\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '--group-add', 'keep-groups',\n            '-v', get_volume_mapping('%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.docker:%(homedir)s/.docker:rw' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('/etc/docker:/etc/docker:ro'),\n            '-v', get_volume_mapping('%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR)),\n            '-v', get_volume_mapping('entrypoint.sh:/opt/skipper/skipper-entrypoint.sh:rw'),\n            '-v', get_volume_mapping('/var/run/docker.sock:/var/run/docker.sock:rw'),\n            '-v', get_volume_mapping('/var/lib/osmosis:/var/lib/osmosis:rw'),\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            command[0]\n        ]\n        assert not check_output_mock.called\n        popen_mock.assert_called_once_with(expected_nested_command)", "od": 0}
{"code": "def test_run_simple_command_nested_network_not_exist(self, resource_filename_mock, check_output_mock, popen_mock, os_getuid_mock):\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        os_getuid_mock.return_value = USER_ID\n        command = ['pwd']\n        runner.run(command, FQDN_IMAGE)\n        expected_nested_command = [\n            self.runtime, 'run',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', get_default_net(),\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '--group-add', 'keep-groups',\n            '-v', get_volume_mapping('%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.docker:%(homedir)s/.docker:rw' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('/etc/docker:/etc/docker:ro'),\n            '-v', get_volume_mapping('%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR)),\n            '-v', get_volume_mapping('entrypoint.sh:/opt/skipper/skipper-entrypoint.sh:rw'),\n            '-v', get_volume_mapping('/var/run/docker.sock:/var/run/docker.sock:rw'),\n            '-v', get_volume_mapping('/var/lib/osmosis:/var/lib/osmosis:rw'),\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            command[0]\n        ]\n        assert not check_output_mock.called\n        popen_mock.assert_called_once_with(expected_nested_command)", "od": 0}
{"code": "def test_run_complex_command_nested(self, resource_filename_mock, check_output_mock, popen_mock, os_getuid_mock):\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        os_getuid_mock.return_value = USER_ID\n        command = ['ls', '-l']\n        runner.run(command, FQDN_IMAGE)\n        expected_nested_command = [\n            self.runtime, 'run',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', get_default_net(),\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '--group-add', 'keep-groups',\n            '-v', get_volume_mapping('%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.docker:%(homedir)s/.docker:rw' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('/etc/docker:/etc/docker:ro'),\n            '-v', get_volume_mapping('%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR)),\n            '-v', get_volume_mapping('entrypoint.sh:/opt/skipper/skipper-entrypoint.sh:rw'),\n            '-v', get_volume_mapping('/var/run/docker.sock:/var/run/docker.sock:rw'),\n            '-v', get_volume_mapping('/var/lib/osmosis:/var/lib/osmosis:rw'),\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            ' '.join(command)\n        ]\n        assert not check_output_mock.called\n        popen_mock.assert_called_once_with(expected_nested_command)", "od": 0}
{"code": "def test_run_non_existent_unauthorized_volume(self, resource_filename_mock,\n                                                  check_output_mock, popen_mock, os_getuid_mock):\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        os_getuid_mock.return_value = USER_ID\n        command = ['ls', '-l']\n\n        runner.run(command, FQDN_IMAGE, volumes=[\"/usr/bin/nonexistentbinary:/usr/bin/nonexistentbinary\"])\n\n        expected_nested_command = [\n            self.runtime, 'run',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', get_default_net(),\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '--group-add', 'keep-groups',\n            '-v', get_volume_mapping('%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.docker:%(homedir)s/.docker:rw' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('/etc/docker:/etc/docker:ro'),\n            '-v', get_volume_mapping('%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR)),\n            '-v', get_volume_mapping('entrypoint.sh:/opt/skipper/skipper-entrypoint.sh:rw'),\n            '-v', get_volume_mapping('/var/run/docker.sock:/var/run/docker.sock:rw'),\n            '-v', get_volume_mapping('/var/lib/osmosis:/var/lib/osmosis:rw'),\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            ' '.join(command)\n        ]\n        assert not check_output_mock.called\n        popen_mock.assert_called_once_with(expected_nested_command)", "od": 0}
{"code": "def test_run_complex_command_nested_with_env(self, resource_filename_mock, check_output_mock, popen_mock, os_getuid_mock):\n        resource_filename_mock.return_value = \"entrypoint.sh\"\n        popen_mock.return_value.stdout.readline.side_effect = ['aaa', 'bbb', 'ccc', '']\n        popen_mock.return_value.poll.return_value = -1\n        os_getuid_mock.return_value = USER_ID\n        command = ['ls', '-l']\n        runner.run(command, FQDN_IMAGE, ENV)\n        expected_nested_command = [\n            self.runtime, 'run',\n            '-t',\n            '-e', 'KEEP_CONTAINERS=True',\n            '--ulimit', 'nofile=65536:65536',\n            '--privileged',\n            '--net', get_default_net(),\n            '-e', 'KEY1=VAL1',\n            '-e', 'KEY2=VAL2',\n            '-e', 'SKIPPER_USERNAME=testuser',\n            '-e', 'SKIPPER_UID=%(user_uid)s' % dict(user_uid=USER_ID),\n            '-e', 'HOME=%(homedir)s' % dict(homedir=HOME_DIR),\n            '-e', 'CONTAINER_RUNTIME_COMMAND=%(runtime_command)s' % dict(runtime_command=utils.get_runtime_command()),\n            '--group-add', 'keep-groups',\n            '-v', get_volume_mapping('%(homedir)s/.netrc:%(homedir)s/.netrc:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.gitconfig:%(homedir)s/.gitconfig:ro' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('%(homedir)s/.docker:%(homedir)s/.docker:rw' % dict(homedir=HOME_DIR)),\n            '-v', get_volume_mapping('/etc/docker:/etc/docker:ro'),\n            '-v', get_volume_mapping('%(workdir)s:%(workdir)s:rw' % dict(workdir=WORKDIR)),\n            '-v', get_volume_mapping('entrypoint.sh:/opt/skipper/skipper-entrypoint.sh:rw'),\n            '-v', get_volume_mapping('/var/run/docker.sock:/var/run/docker.sock:rw'),\n            '-v', get_volume_mapping('/var/lib/osmosis:/var/lib/osmosis:rw'),\n            '-w', PROJECT_DIR,\n            '--entrypoint', '/opt/skipper/skipper-entrypoint.sh',\n            FQDN_IMAGE,\n            ' '.join(command)\n        ]\n        assert not check_output_mock.called\n        popen_mock.assert_called_once_with(expected_nested_command)", "od": 0}
{"code": "def test_cli_without_params(self):\n        result = self._invoke_cli()\n        self.assertEqual(result.exit_code, 0)", "od": 0}
{"code": "def test_cli_help(self):\n        result = self._invoke_cli(global_params=['--help'])\n        self.assertEqual(result.exit_code, 0)", "od": 0}
{"code": "def test_subcommand_help(self):\n        for subcmd in ('build', 'push', 'make', 'run'):\n            result = self._invoke_cli(\n                global_params=None,\n                subcmd=subcmd,\n                subcmd_params=['--help']\n            )\n            self.assertEqual(result.exit_code, 0)", "od": 0}
{"code": "def test_subcommand_without_global_params(self):\n        subcmd_params_map = {\n            'push': [IMAGE],\n            'run': ['ls' '-l'],\n            'make': ['-f', 'Makefile', 'all'],\n        }\n\n        for subcmd, subcmd_params in six.iteritems(subcmd_params_map):\n            result = self._invoke_cli(\n                global_params=None,\n                subcmd=subcmd,\n                subcmd_params=subcmd_params,\n            )\n            self.assertIsInstance(result.exception, click.BadParameter)\n            # since click testing module messes up exit code\n            # we just verify if the exit code is not 0\n            self.assertNotEqual(0, result.exit_code)", "od": 0}
{"code": "def test_subcommand_without_subcommand_params(self, skipper_runner_run_mock):\n        for subcmd in ('build', 'push', 'run', 'make'):\n            result = self._invoke_cli(self.global_params, subcmd)\n            self.assertNotEqual(result.exit_code, 0)\n            self.assertFalse(skipper_runner_run_mock.called)", "od": 0}
{"code": "def test_build_existing_image(self, skipper_runner_run_mock):\n        build_params = ['image1']\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='build',\n            subcmd_params=build_params\n        )\n        expected_command = [\n            'build',\n            '--network=host',\n            '--build-arg', 'TAG=1234567',\n            '-f', '/home/user/work/project/Dockerfile.image1',\n            '-t', 'image1:1234567',\n            '/home/user/work/project'\n        ]\n        skipper_runner_run_mock.assert_called_once_with(expected_command)", "od": 0}
{"code": "def test_build_existing_image_with_context(self, skipper_runner_run_mock):\n        build_params = ['image1',\n                        '--container-context',\n                        '/home/user/work/project']\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='build',\n            subcmd_params=build_params\n        )\n        expected_command = [\n            'build',\n            '--network=host',\n            '--build-arg', 'TAG=1234567',\n            '-f', '/home/user/work/project/Dockerfile.image1',\n            '-t', 'image1:1234567',\n            '/home/user/work/project'\n        ]\n        skipper_runner_run_mock.assert_called_once_with(expected_command)", "od": 0}
{"code": "def test_build_with_context_from_config_file(self, skipper_runner_run_mock):\n        build_params = ['image1']\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='build',\n            subcmd_params=build_params\n        )\n        expected_command = [\n            'build',\n            '--network=host',\n            '--build-arg', 'TAG=1234567',\n            '-f', '/home/user/work/project/Dockerfile.image1',\n            '-t', 'image1:1234567',\n            SKIPPER_CONF_CONTAINER_CONTEXT\n        ]\n        skipper_runner_run_mock.assert_called_once_with(expected_command)", "od": 0}
{"code": "def test_make_without_build_container_tag_with_context(self, skipper_runner_run_mock):\n        global_params = self.global_params[:-2]\n        makefile = 'Makefile'\n        target = 'all'\n        make_params = ['-f', makefile, target]\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            global_params=global_params,\n            subcmd='make',\n            subcmd_params=make_params\n        )\n        expected_commands = [\n            mock.call(['build', '--network=host',\n                       '-f', 'Dockerfile.build-container-image',\n                       '-t', 'build-container-image',\n                       SKIPPER_CONF_CONTAINER_CONTEXT],\n                      stdout_to_stderr=True),\n            mock.call(['make'] + make_params, fqdn_image='build-container-image', environment=[],\n                      interactive=False, name=None, net=None, publish=(), volumes=None, workdir=None,\n                      use_cache=False, workspace=None, env_file=()),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands)", "od": 0}
{"code": "def test_build_non_existing_image(self, skipper_runner_run_mock):\n        build_params = ['my_image']\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='build',\n            subcmd_params=build_params\n        )\n        self.assertFalse(skipper_runner_run_mock.called)", "od": 0}
{"code": "def test_build_multiple_images(self, skipper_runner_run_mock):\n        skipper_runner_run_mock.return_value = 0\n        build_params = ['image1', 'image2']\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='build',\n            subcmd_params=build_params\n        )\n        expected_commands = [\n            mock.call(['build', '--network=host', '--build-arg', 'TAG=1234567',\n                       '-f', '/home/user/work/project/Dockerfile.image1', '-t',\n                       'image1:1234567',\n                       '/home/user/work/project']),\n            mock.call(['build', '--network=host', '--build-arg', 'TAG=1234567',\n                       '-f', '/home/user/work/project/Dockerfile.image2', '-t',\n                       'image2:1234567',\n                       '/home/user/work/project']),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands, any_order=True)", "od": 0}
{"code": "def test_build_multiple_images_with_invalid_image(self, skipper_runner_run_mock):\n        build_params = ['image1', 'image2']\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='build',\n            subcmd_params=build_params\n        )\n        expected_command = [\n            'build',\n            '--network=host',\n            '--build-arg', 'TAG=1234567',\n            '-f', '/home/user/work/project/Dockerfile.image1',\n            '-t', 'image1:1234567',\n            '/home/user/work/project'\n        ]\n        skipper_runner_run_mock.assert_called_once_with(expected_command)", "od": 0}
{"code": "def test_build_multiple_images_with_non_existing_dockerfile(self, skipper_runner_run_mock, os_path_exists_mock):\n        os_path_exists_mock.side_effect = lambda dockerfile: 'image1' in dockerfile\n        build_params = ['image1', 'image2']\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='build',\n            subcmd_params=build_params\n        )\n        expected_command = [\n            'build',\n            '--network=host',\n            '--build-arg', 'TAG=1234567',\n            '-f', '/home/user/work/project/Dockerfile.image1',\n            '-t', 'image1:1234567',\n            '/home/user/work/project'\n        ]\n        skipper_runner_run_mock.assert_called_once_with(expected_command)", "od": 0}
{"code": "def test_build_all_images(self, skipper_runner_run_mock):\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='build',\n        )\n        expected_commands = [\n            mock.call(['build', '--network=host', '--build-arg', 'TAG=1234567',\n                       '-f', '/home/user/work/project/Dockerfile.image1', '-t',\n                       'image1:1234567',\n                       '/home/user/work/project']),\n            mock.call(['build', '--network=host', '--build-arg', 'TAG=1234567',\n                       '-f', '/home/user/work/project/Dockerfile.image2', '-t',\n                       'image2:1234567',\n                       '/home/user/work/project']),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands, any_order=True)", "od": 0}
{"code": "def test_build_with_defaults_from_config_file(self, skipper_runner_run_mock):\n        build_params = ['image1']\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='build',\n            subcmd_params=build_params\n        )\n        expected_command = [\n            'build',\n            '--network=host', '--build-arg', 'TAG=1234567',\n            '-f', '/home/user/work/project/Dockerfile.image1',\n            '-t', 'image1:1234567',\n            '/home/user/work/project'\n        ]\n        skipper_runner_run_mock.assert_called_once_with(expected_command)", "od": 0}
{"code": "def test_build_with_defaults_from_config_file_including_containers(self, skipper_runner_run_mock):\n        build_params = ['image1']\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='build',\n            subcmd_params=build_params\n        )\n        expected_command = [\n            'build',\n            '--network=host', '--build-arg', 'TAG=1234567',\n            '-f', '/home/user/work/project/app1/Dockerfile',\n            '-t', 'image1:1234567',\n            '/home/user/work/project/app1'\n        ]\n        skipper_runner_run_mock.assert_called_once_with(expected_command)", "od": 0}
{"code": "def test_build_with_build_args(self, skipper_runner_run_mock):\n        build_params = [\"image1\"]\n        self._invoke_cli(\n            global_params=self.global_params + [\"--build-arg\", \"key1=value1\", \"--build-arg\", \"key2=value2\"],\n            subcmd=\"build\",\n            subcmd_params=build_params,\n        )\n        expected_commands = [\n            \"build\",\n            \"--network=host\",\n            \"--build-arg\",\n            \"key1=value1\",\n            \"--build-arg\",\n            \"key2=value2\",\n            \"--build-arg\",\n            \"TAG=1234567\",\n            \"-f\",\n            \"/home/user/work/project/Dockerfile.image1\",\n            \"-t\",\n            \"image1:1234567\",\n            \"/home/user/work/project\",\n        ]\n        skipper_runner_run_mock.assert_called_once_with(expected_commands)", "od": 0}
{"code": "def test_build_with_build_contexts(self, skipper_runner_run_mock):\n        build_params = [\"image1\"]\n        self._invoke_cli(\n            global_params=self.global_params + [\"--build-context\", \"context1=/path/to/context\"],\n            subcmd=\"build\",\n            subcmd_params=build_params,\n        )\n        expected_commands = [\n            \"build\",\n            \"--network=host\",\n            \"--build-arg\", \"TAG=1234567\",\n            \"--build-context\", \"context1=/path/to/context\",\n            \"-f\", \"/home/user/work/project/Dockerfile.image1\",\n            \"-t\", \"image1:1234567\",\n            \"/home/user/work/project\",\n        ]\n        skipper_runner_run_mock.assert_called_once_with(expected_commands)", "od": 0}
{"code": "def test_push(self, skipper_runner_run_mock, requests_get_mock):\n        skipper_runner_run_mock.side_effect = [0, 0]\n        push_params = ['my_image']\n        with mock.patch('requests.Response', autospec=True) as requests_response_class_mock:\n            requests_response_mock = requests_response_class_mock.return_value\n            requests_response_mock.json.return_value = {\n                'name': 'my_image',\n                'tags': ['latest', 'aaaaaaa', 'bbbbbbb']\n            }\n            requests_get_mock.return_value = requests_response_mock\n\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='push',\n            subcmd_params=push_params\n        )\n        expected_commands = [\n            mock.call(['tag', 'my_image:1234567', 'registry.io:5000/my_image:1234567']),\n            mock.call(['push', 'registry.io:5000/my_image:1234567']),\n            mock.call(['rmi', 'registry.io:5000/my_image:1234567']),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands)", "od": 0}
{"code": "def test_push_already_in_registry(self, skipper_runner_run_mock, requests_get_mock):\n        skipper_runner_run_mock.side_effect = [0, 0]\n        push_params = ['my_image']\n        with mock.patch('requests.Response', autospec=True) as requests_response_class_mock:\n            requests_response_mock = requests_response_class_mock.return_value\n            requests_response_mock.json.return_value = {\n                'name': 'my_image',\n                'tags': ['latest', 'aaaaaaa', 'bbbbbbb', \"1234567\"]\n            }\n            requests_get_mock.return_value = requests_response_mock\n\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='push',\n            subcmd_params=push_params\n        )\n        expected_commands = [\n            mock.call(['tag', 'my_image:1234567', 'registry.io:5000/my_image:1234567']),\n            mock.call(['rmi', 'registry.io:5000/my_image:1234567']),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands)", "od": 0}
{"code": "def test_push_already_in_registry_with_force(self, skipper_runner_run_mock, requests_get_mock):\n        skipper_runner_run_mock.side_effect = [0, 0]\n        push_params = ['my_image', \"--force\"]\n        with mock.patch('requests.Response', autospec=True) as requests_response_class_mock:\n            requests_response_mock = requests_response_class_mock.return_value\n            requests_response_mock.json.return_value = {\n                'name': 'my_image',\n                'tags': ['latest', 'aaaaaaa', 'bbbbbbb']\n            }\n            requests_get_mock.return_value = requests_response_mock\n\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='push',\n            subcmd_params=push_params\n        )\n        expected_commands = [\n            mock.call(['tag', 'my_image:1234567', 'registry.io:5000/my_image:1234567']),\n            mock.call(['push', 'registry.io:5000/my_image:1234567']),\n            mock.call(['rmi', 'registry.io:5000/my_image:1234567']),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands)", "od": 0}
{"code": "def test_push_fail(self, skipper_runner_run_mock, requests_get_mock):\n        skipper_runner_run_mock.side_effect = [0, 1]\n        push_params = ['my_image']\n        with mock.patch('requests.Response', autospec=True) as requests_response_class_mock:\n            requests_response_mock = requests_response_class_mock.return_value\n            requests_response_mock.json.return_value = {\n                'name': 'my_image',\n                'tags': ['latest', 'aaaaaaa', 'bbbbbbb']\n            }\n            requests_get_mock.return_value = requests_response_mock\n\n        result = self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='push',\n            subcmd_params=push_params\n        )\n        self.assertEqual(result.exit_code, 1)\n        expected_commands = [\n            mock.call(['tag', 'my_image:1234567', 'registry.io:5000/my_image:1234567']),\n            mock.call(['push', 'registry.io:5000/my_image:1234567']),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands)", "od": 0}
{"code": "def test_push_tag_fail(self, skipper_runner_run_mock):\n        skipper_runner_run_mock.side_effect = [1]\n        push_params = ['my_image']\n        result = self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='push',\n            subcmd_params=push_params\n        )\n        self.assertEqual(result.exit_code, 1)\n        expected_commands = [\n            mock.call(['tag', 'my_image:1234567', 'registry.io:5000/my_image:1234567']),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands)", "od": 0}
{"code": "def test_push_rmi_fail(self, skipper_runner_run_mock, requests_get_mock):\n        skipper_runner_run_mock.side_effect = [0, 0, 1]\n        push_params = ['my_image']\n        with mock.patch('requests.Response', autospec=True) as requests_response_class_mock:\n            requests_response_mock = requests_response_class_mock.return_value\n            requests_response_mock.json.return_value = {\n                'name': 'my_image',\n                'tags': ['latest', 'aaaaaaa', 'bbbbbbb']\n            }\n            requests_get_mock.return_value = requests_response_mock\n\n        result = self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='push',\n            subcmd_params=push_params\n        )\n        self.assertEqual(result.exit_code, 0)\n        expected_commands = [\n            mock.call(['tag', 'my_image:1234567', 'registry.io:5000/my_image:1234567']),\n            mock.call(['push', 'registry.io:5000/my_image:1234567']),\n            mock.call(['rmi', 'registry.io:5000/my_image:1234567']),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands)", "od": 0}
{"code": "def test_push_to_namespace(self, skipper_runner_run_mock, requests_get_mock):\n        skipper_runner_run_mock.side_effect = [0, 0]\n        push_params = ['--namespace', 'my_namespace', 'my_image']\n        with mock.patch('requests.Response', autospec=True) as requests_response_class_mock:\n            requests_response_mock = requests_response_class_mock.return_value\n            requests_response_mock.json.return_value = {\n                'name': 'my_image',\n                'tags': ['latest', 'aaaaaaa', 'bbbbbbb']\n            }\n            requests_get_mock.return_value = requests_response_mock\n\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='push',\n            subcmd_params=push_params\n        )\n        expected_commands = [\n            mock.call(['tag', 'my_image:1234567', 'registry.io:5000/my_namespace/my_image:1234567']),\n            mock.call(['push', 'registry.io:5000/my_namespace/my_image:1234567']),\n            mock.call(['rmi', 'registry.io:5000/my_namespace/my_image:1234567']),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands)", "od": 0}
{"code": "def test_push_with_defaults_from_config_file(self, skipper_runner_run_mock, requests_get_mock):\n        skipper_runner_run_mock.side_effect = [0, 0]\n        push_params = ['my_image']\n        with mock.patch('requests.Response', autospec=True) as requests_response_class_mock:\n            requests_response_mock = requests_response_class_mock.return_value\n            requests_response_mock.json.return_value = {\n                'name': 'my_image',\n                'tags': ['latest', 'aaaaaaa', 'bbbbbbb']\n            }\n            requests_get_mock.return_value = requests_response_mock\n\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='push',\n            subcmd_params=push_params\n        )\n        expected_commands = [\n            mock.call(['tag', 'my_image:1234567', 'registry.io:5000/my_image:1234567']),\n            mock.call(['push', 'registry.io:5000/my_image:1234567']),\n            mock.call(['rmi', 'registry.io:5000/my_image:1234567']),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands)", "od": 0}
{"code": "def test_images_with_single_local_results(self, subprocess_check_output_mock, tabulate_mock):\n        subprocess_check_output_mock.return_value = '{\"name\": \"my_image\", \"tag\": \"1234567\"}'\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='images',\n            subcmd_params=[]\n        )\n\n        expected_command = [\n            'docker',\n            'images',\n            '--format', '{\"name\": \"{{.Repository}}\", \"tag\": \"{{.Tag}}\"}',\n            'my_image'\n        ]\n        subprocess_check_output_mock.assert_called_once_with(expected_command)\n        tabulate_mock.assert_called_once_with([['none', 'my_image', '1234567']], headers=['REGISTRY', 'IMAGE', 'TAG'],\n                                              tablefmt='grid')", "od": 0}
{"code": "def test_images_with_multiple_local_results(self, subprocess_check_output_mock, tabulate_mock):\n        subprocess_check_output_mock.side_effect = [\n            '{\"name\": \"image1\", \"tag\": \"aaaaaaa\"}\\n',\n            '{\"name\": \"image2\", \"tag\": \"bbbbbbb\"}\\n{\"name\": \"image2\", \"tag\": \"ccccccc\"}\\n',\n        ]\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='images',\n            subcmd_params=[]\n        )\n\n        command_prefix = [\n            'docker',\n            'images',\n            '--format', '{\"name\": \"{{.Repository}}\", \"tag\": \"{{.Tag}}\"}',\n        ]\n        expected_check_output_calls = [\n            mock.call(command_prefix + ['image1']),\n            mock.call(command_prefix + ['image2']),\n        ]\n        subprocess_check_output_mock.assert_has_calls(expected_check_output_calls, any_order=True)\n        expected_table = [\n            ['none', 'image1', 'aaaaaaa'],\n            ['none', 'image2', 'bbbbbbb'],\n            ['none', 'image2', 'ccccccc'],\n        ]\n        tabulate_mock.assert_called_once_with(expected_table, headers=['REGISTRY', 'IMAGE', 'TAG'], tablefmt='grid')", "od": 0}
{"code": "def test_images_with_all_results(self, subprocess_check_output_mock, requests_get_mock, tabulate_mock,\n                                     requests_bearer_auth_mock):\n        subprocess_check_output_mock.return_value = '{\"name\": \"my_image\", \"tag\": \"aaaaaaa\"}'\n\n        with mock.patch('requests.Response', autospec=True) as requests_response_class_mock:\n            requests_response_mock = requests_response_class_mock.return_value\n            requests_response_mock.json.return_value = {\n                'name': 'my_image',\n                'tags': ['latest', 'aaaaaaa', 'bbbbbbb']\n            }\n            requests_get_mock.return_value = requests_response_mock\n\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='images',\n            subcmd_params=['-r']\n        )\n\n        expected_command = [\n            'docker',\n            'images',\n            '--format', '{\"name\": \"{{.Repository}}\", \"tag\": \"{{.Tag}}\"}',\n            'my_image',\n        ]\n        subprocess_check_output_mock.assert_called_once_with(expected_command)\n\n        expected_url = 'https://%(registry)s/v2/my_image/tags/list' % dict(registry=REGISTRY)\n        requests_get_mock.assert_called_once_with(\n            url=expected_url,\n            auth=requests_bearer_auth_mock(),\n            verify=False\n        )\n\n        expected_images_results = [\n            ['none', 'my_image', 'aaaaaaa'],\n            ['registry.io:5000', 'my_image', 'latest'],\n            ['registry.io:5000', 'my_image', 'aaaaaaa'],\n            ['registry.io:5000', 'my_image', 'bbbbbbb']\n        ]\n        tabulate_mock.assert_called_once_with(expected_images_results, headers=['REGISTRY', 'IMAGE', 'TAG'],\n                                              tablefmt='grid')", "od": 0}
{"code": "def test_images_with_remote_results_only(self, subprocess_check_output_mock, requests_get_mock, tabulate_mock,\n                                             requests_bearer_auth_mock):\n        with mock.patch('requests.Response', autospec=True) as requests_response_class_mock:\n            requests_response_mock = requests_response_class_mock.return_value\n            requests_response_mock.json.return_value = {\n                'name': 'my_image',\n                'tags': ['latest', 'aaaaaaa', 'bbbbbbb']\n            }\n            requests_get_mock.return_value = requests_response_mock\n\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='images',\n            subcmd_params=['-r']\n        )\n\n        expected_command = [\n            'docker',\n            'images',\n            '--format', '{\"name\": \"{{.Repository}}\", \"tag\": \"{{.Tag}}\"}',\n            'my_image',\n        ]\n        subprocess_check_output_mock.assert_called_once_with(expected_command)\n\n        expected_url = 'https://%(registry)s/v2/my_image/tags/list' % dict(registry=REGISTRY)\n        requests_get_mock.assert_called_once_with(\n            url=expected_url,\n            verify=False,\n            auth=requests_bearer_auth_mock()\n        )\n\n        expected_images_results = [\n            ['registry.io:5000', 'my_image', 'latest'],\n            ['registry.io:5000', 'my_image', 'aaaaaaa'],\n            ['registry.io:5000', 'my_image', 'bbbbbbb']\n        ]\n        tabulate_mock.assert_called_once_with(expected_images_results, headers=['REGISTRY', 'IMAGE', 'TAG'],\n                                              tablefmt='grid')", "od": 0}
{"code": "def test_images_with_missing_remote_results(self, subprocess_check_output_mock, requests_get_mock, tabulate_mock,\n                                                requests_bearer_auth_mock):\n        with mock.patch('requests.Response', autospec=True) as requests_response_class_mock:\n            requests_response_mock = requests_response_class_mock.return_value\n            requests_response_mock.ok = False\n            requests_response_mock.json.return_value = {\n                u'errors': [{u'message': u'repository name not known to registry', u'code': u'NAME_UNKNOWN',\n                             u'detail': {u'name': u'my_image'}}]\n            }\n            requests_get_mock.return_value = requests_response_mock\n\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='images',\n            subcmd_params=['-r']\n        )\n\n        expected_command = [\n            'docker',\n            'images',\n            '--format', '{\"name\": \"{{.Repository}}\", \"tag\": \"{{.Tag}}\"}',\n            'my_image',\n        ]\n        subprocess_check_output_mock.assert_called_once_with(expected_command)\n\n        expected_url = 'https://%(registry)s/v2/my_image/tags/list' % dict(registry=REGISTRY)\n        requests_get_mock.assert_called_once_with(\n            url=expected_url,\n            verify=False,\n            auth=requests_bearer_auth_mock()\n        )\n\n        expected_images_results = []\n        tabulate_mock.assert_called_once_with(expected_images_results, headers=['REGISTRY', 'IMAGE', 'TAG'],\n                                              tablefmt='grid')", "od": 0}
{"code": "def test_images_with_local_result_and_missing_remote_results(self, subprocess_check_output_mock, requests_get_mock,\n                                                                 tabulate_mock, requests_bearer_auth_mock):\n        subprocess_check_output_mock.return_value = '{\"name\": \"my_image\", \"tag\": \"aaaaaaa\"}'\n\n        with mock.patch('requests.Response', autospec=True) as requests_response_class_mock:\n            requests_response_mock = requests_response_class_mock.return_value\n            requests_response_mock.ok = False\n            requests_response_mock.json.return_value = {\n                u'errors': [{u'message': u'repository name not known to registry', u'code': u'NAME_UNKNOWN',\n                             u'detail': {u'name': u'my_image'}}]\n            }\n            requests_get_mock.return_value = requests_response_mock\n\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='images',\n            subcmd_params=['-r']\n        )\n\n        expected_command = [\n            'docker',\n            'images',\n            '--format', '{\"name\": \"{{.Repository}}\", \"tag\": \"{{.Tag}}\"}',\n            'my_image',\n        ]\n        subprocess_check_output_mock.assert_called_once_with(expected_command)\n\n        expected_url = 'https://%(registry)s/v2/my_image/tags/list' % dict(registry=REGISTRY)\n        requests_get_mock.assert_called_once_with(\n            url=expected_url,\n            verify=False,\n            auth=requests_bearer_auth_mock()\n        )\n\n        expected_images_results = [\n            ['none', 'my_image', 'aaaaaaa'],\n        ]\n\n        tabulate_mock.assert_called_once_with(expected_images_results, headers=['REGISTRY', 'IMAGE', 'TAG'],\n                                              tablefmt='grid')", "od": 0}
{"code": "def test_images_with_with_remote_error(self, subprocess_check_output_mock, requests_get_mock,\n                                           requests_bearer_auth_mock):\n        with mock.patch('requests.Response', autospec=True) as requests_response_class_mock:\n            requests_response_mock = requests_response_class_mock.return_value\n            requests_response_mock.ok = False\n            requests_response_mock.json.return_value = {\n                u'errors': [{u'message': u'repository name not known to registry', u'code': u'UNKNOWN_ERROR',\n                             u'detail': {u'name': u'my_image'}}]\n            }\n            requests_get_mock.return_value = requests_response_mock\n\n        result = self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='images',\n            subcmd_params=['-r']\n        )\n\n        expected_command = [\n            'docker',\n            'images',\n            '--format', '{\"name\": \"{{.Repository}}\", \"tag\": \"{{.Tag}}\"}',\n            'my_image',\n        ]\n        subprocess_check_output_mock.assert_called_once_with(expected_command)\n\n        expected_url = 'https://%(registry)s/v2/my_image/tags/list' % dict(registry=REGISTRY)\n        requests_get_mock.assert_called_once_with(\n            url=expected_url,\n            verify=False,\n            auth=requests_bearer_auth_mock()\n        )\n\n        self.assertIsInstance(result.exception, click.exceptions.ClickException)", "od": 0}
{"code": "def test_images_without_local_results(self, subprocess_check_output_mock, tabulate_mock):\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='images',\n            subcmd_params=[]\n        )\n\n        expected_command = [\n            'docker',\n            'images',\n            '--format', '{\"name\": \"{{.Repository}}\", \"tag\": \"{{.Tag}}\"}',\n            'my_image',\n        ]\n        subprocess_check_output_mock.assert_called_once_with(expected_command)\n        tabulate_mock.assert_called_once_with([], headers=['REGISTRY', 'IMAGE', 'TAG'], tablefmt='grid')", "od": 0}
{"code": "def test_rmi_local(self, subprocess_check_output_mock):\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='rmi',\n            subcmd_params=['my_image', '1234567']\n        )\n\n        expected_command = [\n            'docker',\n            'rmi',\n            u'my_image:1234567'\n        ]\n        subprocess_check_output_mock.assert_called_once_with(expected_command)", "od": 0}
{"code": "def test_rmi_remote(self, requests_get_mock, requests_delete_mock, requests_bearer_auth_mock):\n        requests_get_mock.side_effect = [mock.Mock(headers={'Docker-Content-Digest': 'digest'})]\n        requests_delete_mock.side_effect = [mock.Mock(ok=True)]\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='rmi',\n            subcmd_params=['-r', IMAGE, TAG]\n        )\n\n        url = 'https://%(registry)s/v2/%(image)s/manifests/%(reference)s' % dict(registry=REGISTRY, image=IMAGE,\n                                                                                 reference=TAG)\n        headers = {\"Accept\": \"application/vnd.docker.distribution.manifest.v2+json\"}\n        requests_get_mock.assert_called_once_with(url=url, headers=headers, verify=False,\n                                                  auth=requests_bearer_auth_mock())\n        url = 'https://%(registry)s/v2/%(image)s/manifests/%(reference)s' % dict(registry=REGISTRY, image=IMAGE,\n                                                                                 reference='digest')\n        requests_delete_mock.assert_called_once_with(url=url, verify=False,\n                                                     auth=requests_bearer_auth_mock())", "od": 0}
{"code": "def test_rmi_remote_fail(self, requests_get_mock, requests_delete_mock, requests_bearer_auth_mock):\n        requests_get_mock.side_effect = [mock.Mock(headers={'Docker-Content-Digest': 'digest'})]\n        requests_delete_mock.side_effect = HTTPError()\n        result = self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='rmi',\n            subcmd_params=['-r', IMAGE, TAG]\n        )\n        self.assertIsInstance(result.exception, Exception)\n\n        url = 'https://%(registry)s/v2/%(image)s/manifests/%(reference)s' % dict(registry=REGISTRY, image=IMAGE,\n                                                                                 reference=TAG)\n        headers = {\"Accept\": \"application/vnd.docker.distribution.manifest.v2+json\"}\n        requests_get_mock.assert_called_once_with(url=url, headers=headers, verify=False,\n                                                  auth=requests_bearer_auth_mock())\n        url = 'https://%(registry)s/v2/%(image)s/manifests/%(reference)s' % dict(registry=REGISTRY, image=IMAGE,\n                                                                                 reference='digest')\n        requests_delete_mock.assert_called_once_with(url=url, verify=False, auth=requests_bearer_auth_mock())", "od": 0}
{"code": "def test_validate_project_image(self):\n        result = self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='rmi',\n            subcmd_params=['-r', 'non-project-image', TAG]\n        )\n        self.assertIsInstance(result.exception, click.BadParameter)", "od": 0}
{"code": "def test_run_with_existing_local_build_container(self, skipper_runner_run_mock):\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_image_name = 'build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_image_name, environment=[],\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_with_existing_remote_build_container(self, skipper_runner_run_mock, requests_get_mock):\n        requests_response_class_mock = mock.MagicMock(spec='requests.Response')\n        requests_response_mock = requests_response_class_mock.return_value\n        requests_response_mock.json.return_value = {\n            'name': 'my_image',\n            'tags': ['latest', 'aaaaaaa', 'bbbbbbb', 'build-container-tag']\n        }\n        requests_response_mock.status_code = http_client.OK\n        requests_get_mock.return_value = requests_response_mock\n\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_image_name = 'registry.io:5000/build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_image_name, environment=[],\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_with_non_existing_build_container(self, requests_get_mock):\n        requests_response_class_mock = mock.MagicMock(spec='requests.Response')\n        requests_response_mock = requests_response_class_mock.return_value\n        requests_response_mock.json.return_value = {\n            'name': 'my_image',\n            'tags': ['latest', 'aaaaaaa', 'bbbbbbb']\n        }\n\n        requests_get_mock.return_value = requests_response_mock\n        command = ['ls', '-l']\n        run_params = command\n        ret = self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        self.assertIsInstance(ret.exception, click.exceptions.ClickException)", "od": 0}
{"code": "def test_run_with_defaults_from_config_file(self, skipper_runner_run_mock):\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_fqdn_image = 'skipper-conf-build-container-image:skipper-conf-build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=[],\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_with_defaults_and_env_from_env_file(\n            self,\n            skipper_runner_run_mock\n    ):\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            defaults=SKIPPER_CONF_WITH_ENV_FILE,\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_fqdn_image = 'skipper-conf-build-container-image:skipper-conf-build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command,\n                                                        fqdn_image=expected_fqdn_image,\n                                                        environment=[],\n                                                        interactive=False,\n                                                        name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None,\n                                                        workspace=None,\n                                                        use_cache=False,\n                                                        env_file=(ENV_FILE_PATH,))", "od": 0}
{"code": "def test_run_with_defaults_and_env_from_multiple_env_file(\n            self,\n            skipper_runner_run_mock\n    ):\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            defaults=SKIPPER_CONF_WITH_MULTIPLE_ENV_FILES,\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_fqdn_image = 'skipper-conf-build-container-image:skipper-conf-build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command,\n                                                        fqdn_image=expected_fqdn_image,\n                                                        environment=[],\n                                                        interactive=False,\n                                                        name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None,\n                                                        workspace=None,\n                                                        use_cache=False,\n                                                        env_file=tuple(ENV_FILES))", "od": 0}
{"code": "def test_run_with_env_overriding_config_file(self, skipper_runner_run_mock):\n        command = ['ls', '-l']\n        run_params = ['-e', ENV[0], '-e', ENV[1]] + command\n        self._invoke_cli(\n            defaults=SKIPPER_CONF_WITH_ENV,\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        env = [f'{key}={value}' for key, value in six.iteritems(SKIPPER_CONF_ENV)] + ENV\n        expected_fqdn_image = 'skipper-conf-build-container-image:skipper-conf-build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=env,\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_with_env_list(self, skipper_runner_run_mock):\n        os.environ['VAL4'] = \"val4-evaluation\"\n        command = ['ls', '-l']\n        run_params = ['-e', ENV[0], '-e', ENV[1]] + command\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        env = ['key1=value1'] + ENV\n        expected_fqdn_image = 'skipper-conf-build-container-image:skipper-conf-build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=env,\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_with_env_list_get_from_env(self, skipper_runner_run_mock):\n        os.environ['VAL4'] = \"val4-evaluation\"\n        command = ['ls', '-l']\n        run_params = ['-e', ENV[0], '-e', ENV[1]] + command\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        env = ['key1=value1', 'key2=value2'] + ENV\n        expected_fqdn_image = 'skipper-conf-build-container-image:skipper-conf-build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=env,\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_with_env_wrong_type(self, skipper_runner_run_mock):\n        os.environ['VAL4'] = \"val4-evaluation\"\n        command = ['ls', '-l']\n        run_params = ['-e', ENV[0], '-e', ENV[1]] + command\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        self.assertEqual(len(skipper_runner_run_mock.mock_calls), 0)", "od": 0}
{"code": "def test_run_with_env(self, skipper_runner_run_mock):\n        command = ['ls', '-l']\n        os.environ['VAL4'] = \"val4-evaluation\"\n        run_params = ['-e', ENV[0], '-e', ENV[1]] + command\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_fqdn_image = 'build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=ENV,\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_interactive_from_environment(self, skipper_runner_run_mock):\n        os.environ['SKIPPER_INTERACTIVE'] = 'True'\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_fqdn_image = 'build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=[],\n                                                        interactive=True, name=None, net=None, publish=(), volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())\n        del os.environ['SKIPPER_INTERACTIVE']", "od": 0}
{"code": "def test_run_non_interactive_from_environment(self, skipper_runner_run_mock):\n        os.environ['SKIPPER_INTERACTIVE'] = 'False'\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_fqdn_image = 'build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=[],\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())\n        del os.environ['SKIPPER_INTERACTIVE']", "od": 0}
{"code": "def test_run_non_interactive(self, skipper_runner_run_mock):\n        command = ['ls', '-l']\n        run_params = ['--interactive'] + command\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_fqdn_image = 'build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=[],\n                                                        interactive=True, name=None, net=None, publish=(), volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_without_build_container_tag(self, skipper_runner_run_mock):\n        global_params = self.global_params[:-2]\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            global_params=global_params,\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_commands = [\n            mock.call(['build', '--network=host',\n                       '-f', 'Dockerfile.build-container-image',\n                       '-t', 'build-container-image', '.'],\n                      stdout_to_stderr=True),\n            mock.call(command, fqdn_image='build-container-image', environment=[],\n                      interactive=False, name=None, net=None, publish=(), volumes=None, workdir=None, workspace=None,\n                      use_cache=False, env_file=()),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands)", "od": 1}
{"code": "def test_run_without_build_container_tag_cached(self, skipper_runner_run_mock):\n        global_params = self.global_params[:-2]\n        command = ['ls', '-l']\n        run_params = ['--cache'] + command\n        self._invoke_cli(\n            global_params=global_params,\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_commands = [\n            mock.call(command, fqdn_image='build-container-image', environment=[],\n                      interactive=False, name=None, net=None, publish=(), volumes=None, workdir=None, workspace=None,\n                      use_cache=True, env_file=()),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands)", "od": 1}
{"code": "def test_run_with_non_default_net(self, skipper_runner_run_mock):\n        global_params = self.global_params\n        global_params += ['--build-container-net', 'non-default-net']\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            global_params=global_params,\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_fqdn_image = 'build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=[],\n                                                        interactive=False, name=None, net='non-default-net',\n                                                        publish=(), volumes=None, workdir=None, workspace=None,\n                                                        use_cache=False, env_file=())", "od": 0}
{"code": "def test_run_with_publish_single_port(self, skipper_runner_run_mock):\n        global_params = self.global_params\n        global_params += ['--build-container-net', 'non-default-net']\n\n        makefile = 'Makefile'\n        target = 'all'\n        make_params = ['-p', '123:123', '-f', makefile, target]\n\n        self._invoke_cli(\n            global_params=global_params,\n            subcmd='make',\n            subcmd_params=make_params\n        )\n\n        expected_command = ['make', '-f', makefile, target]\n\n        expected_fqdn_image = 'build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(expected_command, fqdn_image=expected_fqdn_image,\n                                                        environment=[],\n                                                        interactive=False, name=None, net=u'non-default-net',\n                                                        publish=(u'123:123',), volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_with_publish_multiple_ports(self, skipper_runner_run_mock):\n        global_params = self.global_params\n        global_params += ['--build-container-net', 'non-default-net']\n\n        makefile = 'Makefile'\n        target = 'all'\n        make_params = ['-p', '123:123', '-p', '12:12', '-f', makefile, target]\n\n        self._invoke_cli(\n            global_params=global_params,\n            subcmd='make',\n            subcmd_params=make_params\n        )\n\n        expected_command = ['make', '-f', makefile, target]\n\n        expected_fqdn_image = 'build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(expected_command, fqdn_image=expected_fqdn_image,\n                                                        environment=[],\n                                                        interactive=False, name=None, net=u'non-default-net',\n                                                        publish=('123:123', '12:12'), volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_with_publish_port_range(self, skipper_runner_run_mock):\n        global_params = self.global_params\n        global_params += ['--build-container-net', 'non-default-net']\n\n        makefile = 'Makefile'\n        target = 'all'\n        make_params = ['-p', '123:123', '-p', '12-13:12-13', '-f', makefile, target]\n\n        self._invoke_cli(\n            global_params=global_params,\n            subcmd='make',\n            subcmd_params=make_params\n        )\n\n        expected_command = ['make', '-f', makefile, target]\n\n        expected_fqdn_image = 'build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(expected_command, fqdn_image=expected_fqdn_image,\n                                                        environment=[],\n                                                        interactive=False, name=None, net=u'non-default-net',\n                                                        publish=('123:123', '12-13:12-13'), volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_with_publish_textual_port(self):\n        global_params = self.global_params\n        global_params += ['--build-container-net', 'non-default-net']\n\n        makefile = 'Makefile'\n        target = 'all'\n        make_params = ['-p', '123:a1', '-p', '12:12', '-f', makefile, target]\n\n        result = self._invoke_cli(global_params=global_params, subcmd='make', subcmd_params=make_params)\n        self.assertIsInstance(result.exception, click.BadParameter)\n        self.assertEqual(\"Publish need to be in format port:port or port-port:port-port\", result.exception.message)\n        # since click testing module messes up exit code\n        # we just verify if the exit code is not 0\n        self.assertNotEqual(0, result.exit_code)", "od": 0}
{"code": "def test_run_with_publish_textual_port_range(self):\n        global_params = self.global_params\n        global_params += ['--build-container-net', 'non-default-net']\n\n        makefile = 'Makefile'\n        target = 'all'\n        make_params = ['-p', '123-1:1-a1', '-p', '12:12', '-f', makefile, target]\n\n        result = self._invoke_cli(global_params=global_params, subcmd='make', subcmd_params=make_params)\n        self.assertIsInstance(result.exception, click.BadParameter)\n        self.assertEqual(\"Publish need to be in format port:port or port-port:port-port\", result.exception.message)\n        # since click testing module messes up exit code\n        # we just verify if the exit code is not 0\n        self.assertNotEqual(0, result.exit_code)", "od": 0}
{"code": "def test_run_with_invalid_port_range(self):\n        global_params = self.global_params\n        global_params += ['--build-container-net', 'non-default-net']\n\n        makefile = 'Makefile'\n        target = 'all'\n        make_params = ['-p', '15-25:25-15', '-p', '12:12', '-f', makefile, target]\n\n        result = self._invoke_cli(global_params=global_params, subcmd='make', subcmd_params=make_params)\n        self.assertIsInstance(result.exception, click.BadParameter)\n        self.assertEqual(\"Invalid port range: 25 should be bigger than 15\", result.exception.message)\n        # since click testing module messes up exit code\n        # we just verify if the exit code is not 0\n        self.assertNotEqual(0, result.exit_code)\n\n        make_params = ['-p', '25-15:15-25', '-p', '12:12', '-f', makefile, target]\n        result = self._invoke_cli(global_params=global_params, subcmd='make', subcmd_params=make_params)\n        self.assertIsInstance(result.exception, click.BadParameter)\n        self.assertEqual(\"Invalid port range: 25 should be bigger than 15\", result.exception.message)\n        # since click testing module messes up exit code\n        # we just verify if the exit code is not 0\n        self.assertNotEqual(0, result.exit_code)", "od": 0}
{"code": "def test_run_with_publish_out_of_range_port(self):\n        global_params = self.global_params\n        global_params += ['--build-container-net', 'non-default-net']\n\n        makefile = 'Makefile'\n        target = 'all'\n        make_params = ['-p', '123:1', '-p', '12:121111111', '-f', makefile, target]\n\n        result = self._invoke_cli(global_params=global_params, subcmd='make', subcmd_params=make_params)\n        self.assertIsInstance(result.exception, click.BadParameter)\n        self.assertEqual(\"Invalid port number: port 121111111 is out of range\", result.exception.message)\n        # since click testing module messes up exit code\n        # we just verify if the exit code is not 0\n        self.assertNotEqual(0, result.exit_code)", "od": 0}
{"code": "def test_run_with_defaults_from_config_file_including_volumes(self, skipper_runner_run_mock):\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_fqdn_image = 'skipper-conf-build-container-image:skipper-conf-build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=[],\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=['volume1', 'volume2'], workspace=None,\n                                                        workdir=None, use_cache=False, env_file=())", "od": 0}
{"code": "def test_run_with_defaults_from_config_file_including_workdir(self, skipper_runner_run_mock):\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_fqdn_image = 'skipper-conf-build-container-image:skipper-conf-build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=[],\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir='test-workdir', workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_with_defaults_from_config_file_including_workspace(self, skipper_runner_run_mock):\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_fqdn_image = 'skipper-conf-build-container-image:skipper-conf-build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=[],\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=\"/test/workspace\", use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_with_config_including_git_revision_with_uncommitted_changes(self, skipper_runner_run_mock):\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_fqdn_image = 'skipper-conf-build-container-image:1234567'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=[],\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, use_cache=False, workspace=None,\n                                                        env_file=())", "od": 0}
{"code": "def test_run_with_config_including_git_revision_without_uncommitted_changes(self, skipper_runner_run_mock):\n        command = ['ls', '-l']\n        run_params = command\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='run',\n            subcmd_params=run_params\n        )\n        expected_fqdn_image = 'skipper-conf-build-container-image:1234567'\n        skipper_runner_run_mock.assert_called_once_with(command, fqdn_image=expected_fqdn_image, environment=[],\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_make(self, skipper_runner_run_mock):\n        makefile = 'Makefile'\n        target = 'all'\n        make_params = ['-f', makefile, target]\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='make',\n            subcmd_params=make_params\n        )\n        expected_command = ['make', '-f', makefile, target]\n        expected_fqdn_image = 'build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(expected_command, fqdn_image=expected_fqdn_image,\n                                                        environment=[],\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 1}
{"code": "def test_make_with_default_params(self, skipper_runner_run_mock):\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='make',\n        )\n        expected_command = ['make', '-f', \"Makefile\"]\n        expected_fqdn_image = 'build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(expected_command, fqdn_image=expected_fqdn_image,\n                                                        environment=[],\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_make_with_additional_make_params(self, skipper_runner_run_mock):\n        target = 'all'\n        make_params = ['-j', '4', target, 'OS=linux']\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='make',\n            subcmd_params=make_params\n        )\n        expected_command = ['make', '-f', 'Makefile', '-j', '4', target, 'OS=linux']\n        expected_fqdn_image = 'build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(expected_command, fqdn_image=expected_fqdn_image,\n                                                        environment=[],\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_make_with_defaults_from_config_file(self, skipper_runner_run_mock):\n        makefile = 'Makefile'\n        target = 'all'\n        make_params = ['-f', makefile, target]\n        self._invoke_cli(\n            defaults=config.load_defaults(),\n            subcmd='make',\n            subcmd_params=make_params\n        )\n        expected_command = ['make', '-f', makefile, target]\n        expected_fqdn_image = 'skipper-conf-build-container-image:skipper-conf-build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(expected_command, fqdn_image=expected_fqdn_image,\n                                                        environment=[],\n                                                        interactive=False, name=None, net=None, publish=(),\n                                                        volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_make_without_build_container_tag(self, skipper_runner_run_mock):\n        global_params = self.global_params[:-2]\n        makefile = 'Makefile'\n        target = 'all'\n        make_params = ['-f', makefile, target]\n        self._invoke_cli(\n            global_params=global_params,\n            subcmd='make',\n            subcmd_params=make_params\n        )\n        expected_commands = [\n            mock.call(['build', '--network=host', '-f', 'Dockerfile.build-container-image',\n                      '-t', 'build-container-image', '.'],\n                      stdout_to_stderr=True),\n            mock.call(['make'] + make_params, fqdn_image='build-container-image', environment=[],\n                      interactive=False, name=None, net=None, publish=(), volumes=None, workdir=None, workspace=None,\n                      use_cache=False, env_file=()),\n        ]\n        skipper_runner_run_mock.assert_has_calls(expected_commands)", "od": 1}
{"code": "def test_shell(self, skipper_runner_run_mock):\n        self._invoke_cli(\n            global_params=self.global_params,\n            subcmd='shell',\n        )\n        expected_fqdn_image = 'build-container-image:build-container-tag'\n        skipper_runner_run_mock.assert_called_once_with(['bash'], fqdn_image=expected_fqdn_image, environment=[],\n                                                        interactive=True, name=None, net=None, publish=(), volumes=None,\n                                                        workdir=None, workspace=None, use_cache=False,\n                                                        env_file=())", "od": 0}
{"code": "def test_version(self, get_dist_mock, echo_mock):\n        expected_version = '1.2.3'\n        get_dist_mock.return_value = mock.MagicMock()\n        get_dist_mock.return_value.version = expected_version\n\n        self._invoke_cli(\n            subcmd='version',\n        )\n        echo_mock.assert_called_once_with(expected_version)", "od": 0}
{"code": "def test_parse_args_default(self):\n        args = stowage.parse_args([])\n        assert args.packages == []\n        assert args.source == '~/dotfiles'\n        assert args.destination == '~'\n        assert args.backup == '~/.config/stowage/backup/'\n        assert not args.dryrun\n        assert not args.verbose\n        assert not args.skip_backup", "od": 0}
{"code": "def test_parse_args_all(self):\n        args = stowage.parse_args([\n            '-d', 'dest',\n            '-s', 'src',\n            '-b', 'backup',\n            '--dryrun',\n            '--verbose',\n            '--skip-backup',\n            'pkg1',\n            'pkg2',\n            'pkg3',\n        ])\n        assert args.packages == ['pkg1', 'pkg2', 'pkg3']\n        assert args.source == 'src'\n        assert args.destination == 'dest'\n        assert args.backup == 'backup'\n        assert args.dryrun\n        assert args.verbose\n        assert args.skip_backup", "od": 0}
{"code": "def test_environ_defaults(self):\n        os.environ['STOWAGE_SOURCE'] = 'src'\n        os.environ['STOWAGE_DESTINATION'] = 'dest'\n        os.environ['STOWAGE_BACKUP'] = 'bup'\n        args = stowage.parse_args([])\n        assert args.source == 'src'\n        assert args.destination == 'dest'\n        assert args.backup == 'bup'\n        del os.environ['STOWAGE_SOURCE']\n        del os.environ['STOWAGE_DESTINATION']\n        del os.environ['STOWAGE_BACKUP']", "od": 0}
{"code": "def test_check_args(self):\n        args = stowage.parse_args([])\n        with pytest.raises(ValueError):\n            stowage.check_args(args)\n        args = stowage.parse_args(['-s', '~/stuff', '-v', 'pkg'])\n        stowage.check_args(args)\n        assert stowage._is_verbose\n\n        # ensure expands home\n        assert (\n            'home' in args.source or  # linux\n            'Users' in args.source    # macOS\n        )", "od": 0}
{"code": "def test_arg_source_directories(self):\n        args = stowage.parse_args([\n            '--source', 'src',\n            '--dest', 'dest',\n            'pkg1',\n            'pkg2',\n        ])\n        dirs = list(stowage.source_directories(args))\n        assert dirs == ['src/pkg1', 'src/pkg2']", "od": 0}
{"code": "def test_directory_walk(self):\n        args = stowage.parse_args([])\n        results = list(stowage.directory_walk(self.dir, 'test_out'))\n        results_set = set(results)\n        assert len(results_set) == len(results)  # ensure no dupes\n        assert results_set == self.results", "od": 1}
{"code": "def test_needed_symlink_walk(self):\n        args = stowage.parse_args([])\n        results = list(stowage.needed_symlink_walk(self.dir, 'test_out'))\n        results_set = set(results)\n        assert len(results_set) == len(results)  # ensure no dupes\n        assert results_set == self.results", "od": 1}
{"code": "def test_partially_needed_symlink_walk(self):\n        os.symlink(__file__, join(self.dir, '.vimrc'))\n        results = list(stowage.needed_symlink_walk(self.dir, self.dir))\n        results_set = set(results)\n        assert len(results_set) == len(results)  # ensure no dupes\n        assert results_set == set([\n            (join(self.dir, '_config/openbox/openbox.xml'),\n                join(self.dir, '.config/openbox/openbox.xml')),\n        ])\n        os.remove(join(self.dir, '.vimrc'))", "od": 0}
{"code": "def test_main(self):\n        args = stowage.parse_args([\n            '--source', self.dir,\n            '--destination', self.out_dir,\n            '--backup', join(self.dir, 'path/to/bup'),\n            'vim',\n        ])\n        stowage.main(args)\n        assert exists(join(self.out_dir, '.vimrc'))\n        assert exists(join(self.out_dir, '.config', 'openbox', 'openbox.xml'))\n        contents = open(join(self.out_dir, '.vimrc')).read()\n        assert contents == '%s contents' % join(self.dir, 'vim', '_vimrc')", "od": 0}
{"code": "def test_backup(self):\n        args = stowage.parse_args([\n            '--source', self.dir,\n            '--destination', self.out_dir,\n            '--backup', join(self.dir, 'path/to/bup'),\n            'vim',\n        ])\n        open(join(self.out_dir, '.vimrc'), 'w+').write('original')\n        stowage.main(args)\n        assert exists(join(self.out_dir, '.vimrc'))\n        assert exists(join(self.out_dir, '.config', 'openbox', 'openbox.xml'))\n        assert exists(join(self.dir, 'path', 'to', 'bup', '.vimrc'))\n        contents = open(join(self.dir, 'path', 'to', 'bup', '.vimrc')).read()\n        assert contents == 'original'\n        contents = open(join(self.out_dir, '.vimrc')).read()\n        assert contents == '%s contents' % join(self.dir, 'vim', '_vimrc')", "od": 0}
{"code": "def test_i2le(self):\n        self.assertEqual(utils.i2le(0), b'\\x00')\n        self.assertEqual(utils.i2le(0xff), b'\\xff')\n        self.assertEqual(utils.i2le(0x0100), b'\\x00\\x01')\n        self.assertEqual(utils.i2le(0xabcdef), b'\\xef\\xcd\\xab')", "od": 0}
{"code": "def test_i2le_padded(self):\n        self.assertEqual(utils.i2le_padded(0, 4), b'\\x00' * 4)\n        self.assertEqual(utils.i2le_padded(0xff, 1), b'\\xff')\n        self.assertEqual(utils.i2le_padded(0x0100, 8),\n                         b'\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00')\n        self.assertEqual(utils.i2le_padded(0xabcdef, 5),\n                         b'\\xef\\xcd\\xab\\x00\\x00')", "od": 0}
{"code": "def test_i2le_script(self):\n        self.assertEqual(utils.i2le_script(0), '00')\n        self.assertEqual(utils.i2le_script(128), '8000')\n        self.assertEqual(utils.i2le_script(-128), '80')\n        self.assertEqual(utils.i2le_script(127), '7f')\n        self.assertEqual(utils.i2le_script(2 ** 24), '00000001')\n        self.assertEqual(utils.i2le_script(-(2 ** 24)), '000000ff')", "od": 0}
{"code": "def test_le2i(self):\n        self.assertEqual(utils.le2i(b'\\x00' * 4), 0)\n        self.assertEqual(utils.le2i(b'\\xff'), 0xff)\n        self.assertEqual(utils.le2i(b'\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00'),\n                         0x0100)\n        self.assertEqual(utils.le2i(b'\\xef\\xcd\\xab\\x00\\x00'), 0xabcdef)", "od": 0}
{"code": "def test_be2i(self):\n        self.assertEqual(utils.be2i(b'\\x00' * 4), 0)\n        self.assertEqual(utils.be2i(b'\\xff'), 0xff)\n        self.assertEqual(utils.be2i(b'\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00'),\n                         0x01000000000000)\n        self.assertEqual(utils.be2i(b'\\xef\\xcd\\xab\\x00\\x00'), 0xefcdab0000)", "od": 0}
{"code": "def test_i2be(self):\n        self.assertEqual(\n            utils.i2be(0),\n            b'\\x00')\n        self.assertEqual(\n            utils.i2be(0xff),\n            b'\\xff')\n        self.assertEqual(\n            utils.i2be(0xffff),\n            b'\\xff\\xff')", "od": 0}
{"code": "def test_i2be_padded(self):\n        self.assertEqual(\n            utils.i2be_padded(0, 5),\n            b'\\x00' * 5)\n        self.assertEqual(\n            utils.i2be_padded(0xff, 3),\n            b'\\x00\\x00\\xff')\n        self.assertEqual(\n            utils.i2be_padded(0xffff, 2),\n            b'\\xff\\xff')", "od": 0}
{"code": "def test_change_endianness(self):\n        self.assertEqual(utils.change_endianness(b'\\x00'), b'\\x00')\n        self.assertEqual(utils.change_endianness(b'\\x00\\xaa'), b'\\xaa\\x00')\n        self.assertEqual(utils.change_endianness(b'\\xff'), b'\\xff')\n        self.assertEqual(utils.change_endianness(b'\\x00\\xab\\xcd\\xef'),\n                         b'\\xef\\xcd\\xab\\x00')", "od": 0}
{"code": "def test_rmd160(self):\n        '''\n        https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n        '''\n        self.assertEqual(\n            utils.rmd160(b''),\n            bytes.fromhex('9c1185a5c5e9fc54612808977ee8f548b2258d31'))\n        self.assertEqual(\n            utils.rmd160('message digest'.encode('utf-8')),\n            bytes.fromhex('5d0689ef49d2fae572b881b123a85ffa21595f36'))", "od": 0}
{"code": "def test_sha256(self):\n        '''\n        https://www.di-mgt.com.au/sha_testvectors.html\n        '''\n        self.assertEqual(\n            utils.sha256(b''),\n            bytes.fromhex('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'))  # noqa: E501\n        self.assertEqual(\n            utils.sha256('abc'.encode('utf-8')),\n            bytes.fromhex('ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad'))  # noqa: E501\n        self.assertEqual(\n            utils.sha256(helpers.P2WSH['ser']['witnesses'][0]['wit_script']),\n            helpers.P2WSH['ser']['ins'][0]['pk_script'][2:])", "od": 0}
{"code": "def test_hash160(self):\n        self.assertEqual(\n            utils.hash160(bytes.fromhex(helpers.PK['human'][0]['pk'])),\n            helpers.PK['ser'][0]['pkh'])\n        self.assertEqual(\n            utils.hash160(bytes.fromhex(helpers.PK['human'][1]['pk'])),\n            helpers.PK['ser'][1]['pkh'])\n        self.assertEqual(\n            utils.hash160(helpers.P2WPKH_ADDR['pubkey']),\n            helpers.P2WPKH_ADDR['pkh'])", "od": 0}
{"code": "def test_hash256(self):\n        '''\n        http://www.herongyang.com/Bitcoin/Block-Data-Calculate-Double-SHA256-with-Python.html\n        '''\n        self.assertEqual(\n            utils.hash256(b'\\x00'),\n            bytes.fromhex('1406e05881e299367766d313e26c05564ec91bf721d31726bd6e46e60689539a'))  # noqa: E501\n        self.assertEqual(\n            utils.hash256('abc'.encode('utf-8')),\n            bytes.fromhex('4f8b42c22dd3729b519ba6f68d2da7cc5b2d606d05daed5ad5128cc03e6c6358'))  # noqa: E501\n        self.assertEqual(\n            utils.hash256('The quick brown fox jumps over the lazy dog'.encode('utf-8')),  # noqa: E501\n            bytes.fromhex('6d37795021e544d82b41850edf7aabab9a0ebe274e54a519840c4666f35b3937'))", "od": 0}
{"code": "def test_blake256(self):\n        self.assertEqual(\n            utils.blake256('').hex(),\n            '716f6e863f744b9ac22c97ec7b76ea5f5908bc5b2f67c61510bfc4751384ea7a')\n        self.assertEqual(\n            utils.blake256('a').hex(),\n            '43234ff894a9c0590d0246cfc574eb781a80958b01d7a2fa1ac73c673ba5e311')", "od": 0}
{"code": "def test_decred_snowflakes(self):\n        riemann.select_network('decred_main')\n        self.assertEqual(utils.hash160(b'\\x00'),\n                         utils.rmd160(utils.blake256(b'\\x00')))\n\n        self.assertEqual(utils.hash256(b'\\x00'),\n                         utils.blake256(utils.blake256(b'\\x00')))", "od": 0}
{"code": "def test_blake2b(self):\n        '''\n        https://github.com/BLAKE2/BLAKE2/blob/master/testvectors/blake2b-kat.txt\n        '''\n        self.assertEqual(\n            utils.blake2b(b'',\n                          key=bytes.fromhex('000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f')),  # noqa: E501\n            bytes.fromhex('10ebb67700b1868efb4417987acf4690ae9d972fb7a590c2f02871799aaa4786b5e996e8f0f4eb981fc214b005f42d2ff4233499391653df7aefcbc13fc51568'))  # noqa: E501\n\n        self.assertEqual(\n            utils.blake2b(b'\\x00',\n                          key=bytes.fromhex('000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f')),  # noqa: E501\n            bytes.fromhex('961f6dd1e4dd30f63901690c512e78e4b45e4742ed197c3c5e45c549fd25f2e4187b0bc9fe30492b16b0d0bc4ef9b0f34c7003fac09a5ef1532e69430234cebd'))  # noqa: E501\n\n        self.assertEqual(\n            utils.blake2b(bytes.fromhex('000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f6061'),  # noqa: E501\n                          key=bytes.fromhex('000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f')),  # noqa: E501\n            bytes.fromhex('bb2039ec287091bcc9642fc90049e73732e02e577e2862b32216ae9bedcd730c4c284ef3968c368b7d37584f97bd4b4dc6ef6127acfe2e6ae2509124e66c8af4'))", "od": 0}
{"code": "def test_blake2s(self):\n        self.assertEqual(\n            utils.blake2s(b'',\n                          key=bytes.fromhex('000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f')),  # noqa: E501\n            bytes.fromhex('48a8997da407876b3d79c0d92325ad3b89cbb754d86ab71aee047ad345fd2c49'))  # noqa: E501\n\n        self.assertEqual(\n            utils.blake2s(b'\\x00',\n                          key=bytes.fromhex('000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f')),  # noqa: E501\n            bytes.fromhex('40d15fee7c328830166ac3f918650f807e7e01e177258cdc0a39b11f598066f1'))  # noqa: E501\n\n        self.assertEqual(\n            utils.blake2s(bytes.fromhex('000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f'),  # noqa: E501\n                          key=bytes.fromhex('000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f')),  # noqa: E501\n            bytes.fromhex('8975b0577fd35566d750b362b0897a26c399136df07bababbde6203ff2954ed4'))", "od": 0}
{"code": "def test_decode_error(self):\n        with self.assertRaises(ValueError) as context:\n            base58.decode('13VmALKHkCdSN1JULkP6RqW3LcbpWvgryW')\n\n        self.assertIn(\n            'hashed base58 has bad checksum ',\n            str(context.exception))", "od": 0}
{"code": "def test_decode_without_checksum(self):\n        self.assertEqual(\n            base58.decode('1P86rvoC4bTympTEdXnw9HhWVxb4', False),\n            b'\\x00' + helpers.PK['ser'][0]['pkh'])", "od": 0}
{"code": "def test_encode_with_checksum(self):\n        self.assertEqual(\n            base58.encode_with_checksum(b'\\x00' + helpers.PK['ser'][0]['pkh']),\n            helpers.ADDR[0]['p2pkh'])", "od": 0}
{"code": "def test_decode_with_checksum(self):\n        self.assertEqual(\n            b'\\x00' + helpers.PK['ser'][0]['pkh'],\n            base58.decode_with_checksum(helpers.ADDR[0]['p2pkh']))", "od": 0}
{"code": "def test_has_checksum(self):\n        self.assertTrue(\n            base58.has_checksum(helpers.ADDR[0]['p2pkh']))\n        self.assertFalse(base58.has_checksum('1P86rvoC4bTympTEdXnw9HhWVxb4'))", "od": 0}
{"code": "def test_from_long_error(self):\n        with self.assertRaises(ValueError) as context:\n            base58.from_long(56, 1, 5, lambda: 1 / 0)  # lambda always raises\n\n        self.assertIn(\n            \"can't convert to character corresponding to\",\n            str(context.exception))", "od": 0}
{"code": "def test_decred_addresses(self):\n        riemann.select_network('decred_main')\n        for addr in DCR_ADDR:\n            expected = addr[0]\n            addr_hash = bytearray()\n            addr_hash.extend(addr[1])\n            addr_hash.extend(addr[2])\n            self.assertEqual(expected, base58.encode(addr_hash))", "od": 0}
{"code": "def test_output(self):\n        for i in range(len(helpers.P2WSH['human']['outs'])):\n            self.assertEqual(\n                simple.output(\n                    value=helpers.P2WSH['human']['outs'][i]['value'],\n                    address=helpers.P2WSH['human']['outs'][i]['addr']),\n                helpers.P2WSH['ser']['outs'][i]['output'])", "od": 0}
{"code": "def test_outpoint(self):\n        self.assertEqual(\n            simple.outpoint(\n                tx_id=helpers.P2PKH['human']['ins'][0]['hash'],\n                index=helpers.P2PKH['human']['ins'][0]['index']),\n            helpers.P2PKH['ser']['ins'][0]['outpoint'])", "od": 0}
{"code": "def test_unsigned_input(self):\n        outpoint = simple.outpoint(\n            tx_id=helpers.P2PKH['human']['ins'][0]['hash'],\n            index=helpers.P2PKH['human']['ins'][0]['index'])\n\n        self.assertEqual(\n            simple.unsigned_input(\n                outpoint=outpoint),\n            outpoint.to_bytes() + b'\\x00' + b'\\xFE\\xFF\\xFF\\xFF')\n\n        self.assertEqual(\n            simple.unsigned_input(\n                outpoint=outpoint,\n                sequence=0x1234abcd),\n            outpoint.to_bytes() + b'\\x00' + b'\\xcd\\xab\\x34\\x12')", "od": 0}
{"code": "def test_unsigned_legacy_tx(self):\n        outpoint = simple.outpoint(\n            tx_id=helpers.P2PKH['human']['ins'][0]['hash'],\n            index=helpers.P2PKH['human']['ins'][0]['index'])\n        tx_in = simple.unsigned_input(\n            outpoint=outpoint,\n            sequence=helpers.P2PKH['human']['ins'][0]['sequence'])\n        tx_out = simple.output(\n            helpers.P2PKH['human']['outs'][0]['value'],\n            helpers.P2PKH['human']['outs'][0]['addr'])\n        tx_return_output = txn.make_op_return_output(\n            helpers.P2PKH['human']['outs'][1]['memo'])\n        tx = simple.unsigned_legacy_tx(\n            tx_ins=[tx_in],\n            tx_outs=[tx_out, tx_return_output])\n\n        self.assertEqual(tx, helpers.P2PKH['ser']['tx']['unsigned'])", "od": 0}
{"code": "def test_unsigned_witness_tx(self):\n        outpoint = simple.outpoint(\n            tx_id=helpers.P2WPKH['human']['ins'][0]['hash'],\n            index=helpers.P2WPKH['human']['ins'][0]['index'])\n        tx_in = simple.unsigned_input(\n            outpoint=outpoint,\n            sequence=helpers.P2WPKH['human']['ins'][0]['sequence'])\n        tx_out = simple.output(\n            helpers.P2WPKH['human']['outs'][0]['value'],\n            helpers.P2WPKH['human']['outs'][0]['addr'])\n        tx = simple.unsigned_witness_tx(\n            tx_ins=[tx_in],\n            tx_outs=[tx_out],\n            lock_time=helpers.P2WPKH['human']['locktime'])\n\n        self.assertEqual(tx, helpers.P2WPKH['ser']['tx']['unsigned'])", "od": 1}
{"code": "def test_make_p2sh_address(self):\n        a = addr.make_p2sh_address('OP_IF')\n        self.assertEqual(a, helpers.OP_IF['p2sh'])", "od": 1}
{"code": "def test_make_p2sh_address_msig(self):\n        a = addr.make_p2sh_address(helpers.MSIG_2_2['redeem_script'])\n        self.assertEqual(a, helpers.MSIG_2_2['p2sh'])", "od": 1}
{"code": "def test_make_p2wsh_address(self):\n        a = addr.make_p2wsh_address(\n            helpers.P2WSH['human']['witnesses'][0]['wit_script'])\n        self.assertEqual(a, helpers.P2WSH['human']['ins'][0]['addr'])", "od": 0}
{"code": "def test_make_p2pkh_address(self):\n        a = addr.make_p2pkh_address(b'\\x00' * 65)\n        self.assertEqual(a, helpers.ADDR[0]['p2pkh'])\n        b = addr.make_p2pkh_address(b'\\x11' * 65)\n        self.assertEqual(b, helpers.ADDR[1]['p2pkh'])", "od": 0}
{"code": "def test_make_p2wpkh_address(self):\n        a = addr.make_p2wpkh_address(helpers.P2WPKH_ADDR['pubkey'])\n        self.assertEqual(a, helpers.P2WPKH_ADDR['address'])", "od": 0}
{"code": "def test_parse(self):\n        self.assertEqual(addr.parse(helpers.OP_IF['p2sh']),\n                         b'\\x05' + helpers.OP_IF['script_hash'])\n        self.assertEqual(addr.parse(helpers.MSIG_2_2['p2sh']),\n                         b'\\x05' + helpers.MSIG_2_2['script_hash'])\n        self.assertEqual(addr.parse(\n            helpers.P2WSH['human']['ins'][0]['addr']),\n            b'\\x00\\x20' + helpers.P2WSH['ser']['ins'][0]['pk_script'][2:])\n        self.assertEqual(addr.parse(helpers.P2WPKH_ADDR['address']),\n                         b'\\x00\\x14' + helpers.P2WPKH_ADDR['pkh'])\n        self.assertEqual(addr.parse(helpers.ADDR[0]['p2pkh']),\n                         b'\\x00' + helpers.PK['ser'][0]['pkh'])\n\n        with self.assertRaises(ValueError) as context:\n            addr.parse('This is not a valid address.')\n\n        self.assertIn('Unsupported address format. Got: ',\n                      str(context.exception))", "od": 0}
{"code": "def test_parse_hash(self):\n        self.assertEqual(addr.parse_hash(helpers.OP_IF['p2sh']),\n                         helpers.OP_IF['script_hash'])\n        self.assertEqual(addr.parse_hash(helpers.MSIG_2_2['p2sh']),\n                         helpers.MSIG_2_2['script_hash'])\n        self.assertEqual(\n            addr.parse_hash(\n                helpers.P2WSH['human']['ins'][0]['addr']),\n            helpers.P2WSH['ser']['ins'][0]['pk_script'][2:])\n        self.assertEqual(addr.parse_hash(helpers.P2WPKH_ADDR['address']),\n                         helpers.P2WPKH_ADDR['pkh'])\n        self.assertEqual(addr.parse_hash(helpers.ADDR[0]['p2pkh']),\n                         helpers.PK['ser'][0]['pkh'])\n\n        with self.assertRaises(ValueError) as context:\n            addr.parse('bc1blahblahblah')\n\n        self.assertIn('Unsupported address format. Got: ',\n                      str(context.exception))\n\n        # Test cash addr code\n        riemann.select_network('bitcoin_cash_main')\n        self.assertEqual(\n            addr.parse_hash(helpers.OP_IF['p2sh']),\n            helpers.OP_IF['script_hash'])\n\n        self.assertEqual(\n            addr.parse_hash(helpers.OP_IF['cashaddr']),\n            helpers.OP_IF['script_hash'])\n\n        self.assertEqual(\n            addr.parse_hash(helpers.CASHADDR['p2pkh']),\n            utils.hash160(helpers.CASHADDR['pubkey']))", "od": 0}
{"code": "def test_cashaddrs(self):\n        riemann.select_network('bitcoin_cash_main')\n\n        self.assertEqual(\n            addr.make_legacy_p2sh_address('OP_IF'),\n            helpers.OP_IF['p2sh'])\n\n        self.assertEqual(\n            addr.make_sh_address('OP_IF'),\n            helpers.OP_IF['cashaddr'])\n\n        self.assertEqual(\n            addr.make_legacy_p2pkh_address(helpers.CASHADDR['pubkey']),\n            helpers.CASHADDR['legacy_p2pkh'])\n\n        self.assertEqual(\n            addr.make_pkh_address(helpers.CASHADDR['pubkey']),\n            helpers.CASHADDR['p2pkh'])", "od": 0}
{"code": "def test_from_output_script(self):\n\n        self.assertEqual(\n            addr.from_output_script(helpers.OP_IF['output_script']),\n            helpers.OP_IF['p2sh'])\n        self.assertEqual(\n            addr.from_output_script(\n                helpers.P2WSH['ser']['ins'][0]['pk_script']),\n            helpers.P2WSH['human']['ins'][0]['addr'])\n        self.assertEqual(\n            addr.from_output_script(helpers.PK['ser'][0]['pkh_output']),\n            helpers.ADDR[0]['p2pkh'])\n        self.assertEqual(\n            addr.from_output_script(helpers.P2WPKH_ADDR['output']),\n            helpers.P2WPKH_ADDR['address'])\n\n        with self.assertRaises(ValueError) as context:\n            addr.from_output_script(b'\\x8e' * 34)\n        self.assertIn(\n            'Cannot parse address from script.',\n            str(context.exception))", "od": 0}
{"code": "def test_cashaddr_from_output_script(self):\n        riemann.select_network('bitcoin_cash_main')\n        self.assertEqual(\n            addr.from_output_script(helpers.PK['ser'][0]['pkh_output']),\n            helpers.ADDR[0]['p2pkh_cashaddr'])\n        self.assertEqual(\n            addr.from_output_script(helpers.OP_IF['output_script']),\n            helpers.OP_IF['cashaddr'])", "od": 0}
{"code": "def test_to_output_script(self):\n        self.assertEqual(\n            addr.to_output_script(helpers.OP_IF['p2sh']),\n            helpers.OP_IF['output_script'])\n        self.assertEqual(\n            addr.to_output_script(helpers.P2WSH['human']['ins'][0]['addr']),\n            helpers.P2WSH['ser']['ins'][0]['pk_script'])\n        self.assertEqual(\n            addr.to_output_script(helpers.ADDR[0]['p2pkh']),\n            helpers.PK['ser'][0]['pkh_output'])\n        self.assertEqual(\n            addr.to_output_script(helpers.P2WPKH_ADDR['address']),\n            helpers.P2WPKH_ADDR['output'])\n\n        with self.assertRaises(ValueError) as context:\n            # Junk B58 w valid checksum\n            addr.to_output_script('1111111111111111111111111111111111177fdsQ')\n\n        self.assertIn(\n            'Cannot parse output script from address.',\n            str(context.exception))", "od": 0}
{"code": "def test_cashaddr_to_output_script(self):\n        riemann.select_network('bitcoin_cash_main')\n\n        self.assertEqual(\n            addr.to_output_script(helpers.OP_IF['cashaddr']),\n            helpers.OP_IF['output_script'])\n\n        self.assertEqual(\n            addr.to_output_script(helpers.ADDR[0]['p2pkh_cashaddr']),\n            helpers.PK['ser'][0]['pkh_output'])", "od": 0}
{"code": "def test_select_network(self):\n        for n in networks.SUPPORTED:\n            riemann.select_network(n)\n            self.assertIs(riemann.network, networks.SUPPORTED[n])", "od": 0}
{"code": "def test_get_current_network(self):\n        for n in networks.SUPPORTED:\n            riemann.select_network(n)\n            self.assertIs(riemann.get_current_network(),\n                          networks.SUPPORTED[n])", "od": 0}
{"code": "def test_get_current_network_name(self):\n        for n in networks.SUPPORTED:\n            riemann.select_network(n)\n            self.assertEqual(riemann.get_current_network_name(), n)", "od": 0}
{"code": "def test_valid_checksum(self):\n        \"\"\"Test checksum creation and validation.\"\"\"\n        for t in VALID_CHECKSUM:\n            hrp, _ = bech32.bech32_decode(t)\n            self.assertIsNotNone(hrp)\n            pos = t.rfind('1')\n            t = t[:pos + 1] + chr(ord(t[pos + 1]) ^ 1) + t[pos + 2:]\n            hrp, _ = bech32.bech32_decode(t)\n            self.assertIsNone(hrp)", "od": 0}
{"code": "def test_invalid_checksum(self):\n        \"\"\"Test validation of invalid checksums.\"\"\"\n        for test in INVALID_CHECKSUM:\n            hrp, _ = bech32.bech32_decode(test)\n            self.assertIsNone(hrp)", "od": 0}
{"code": "def test_valid_address(self):\n        \"\"\"Test whether valid addresses decode to the correct output.\"\"\"\n        for (address, hexscript) in VALID_ADDRESS:\n            hrp = \"bc\"\n            witver, witprog = bech32.segwit_decode(hrp, address)\n            if witver is None:\n                hrp = \"tb\"\n                witver, witprog = bech32.segwit_decode(hrp, address)\n            self.assertIsNotNone(witver)\n            scriptpubkey = segwit_scriptpubkey(witver, witprog)\n            self.assertEqual(scriptpubkey, bytearray.fromhex(hexscript))\n            addr = bech32.segwit_encode(hrp, witver, witprog)\n            self.assertEqual(address.lower(), addr)", "od": 0}
{"code": "def test_invalid_address(self):\n        \"\"\"Test whether invalid addresses fail to segwit_decode.\"\"\"\n        for test in INVALID_ADDRESS:\n            witver, _ = bech32.segwit_decode(\"bc\", test)\n            self.assertIsNone(witver)\n            witver, _ = bech32.segwit_decode(\"tb\", test)\n            self.assertIsNone(witver)", "od": 0}
{"code": "def test_invalid_address_enc(self):\n        \"\"\"Test whether address encoding fails on invalid input.\"\"\"\n        for hrp, version, length in INVALID_ADDRESS_ENC:\n            code = bech32.segwit_encode(hrp, version, [0] * length)\n            self.assertIsNone(code)", "od": 0}
{"code": "def test_encode_error(self):\n        riemann.select_network('zcash_sprout_main')\n        with self.assertRaises(ValueError) as context:\n            bech32.encode(bytearray([0] * 32))\n\n        self.assertIn(\n            'Network (zcash_sprout_main) does not support bech32 encoding.',\n            str(context.exception))", "od": 0}
{"code": "def test_decode_error(self):\n        riemann.select_network('zcash_sprout_main')\n        with self.assertRaises(ValueError) as context:\n            bech32.decode(bytearray([0] * 32))\n\n        self.assertIn(\n            'Network (zcash_sprout_main) does not support bech32 encoding.',\n            str(context.exception))", "od": 0}
{"code": "def test_convert_bits_error(self):\n        self.assertIsNone(bech32.convertbits([2 ** 5 + 1], 5, 8))", "od": 0}
{"code": "def test_get_network(self):\n        for name in networks.SUPPORTED:\n            n = networks.get_network(name)\n            self.assertEqual(n, networks.SUPPORTED[name])\n\n        # Test Error case\n        with self.assertRaises(ValueError) as context:\n            networks.get_network('toast')\n\n        self.assertIn('Unknown chain specifed: {}'.format('toast'),\n                      str(context.exception))", "od": 0}
{"code": "def test_blake(self):\n        for vectorSet in TEST_VECTORS:\n            self.assertEqual(vectorSet[0], blake_hash(vectorSet[1]).hex())", "od": 0}
{"code": "def test_statistics_cli(self):\n        from n26.cli import statistics\n        result = self._run_cli_cmd(statistics)\n        self.assertIsNotNone(result.output)", "od": 0}
{"code": "def test_transactions_cli(self):\n        from n26.cli import transactions\n        result = self._run_cli_cmd(transactions, [\"--from\", \"01/30/2019\", \"--to\", \"30.01.2020\"])\n        self.assertIsNotNone(result.output)", "od": 0}
{"code": "def test_standing_orders_cli(self):\n        from n26.cli import standing_orders\n        result = self._run_cli_cmd(standing_orders)\n        self.assertIsNotNone(result.output)\n        self.assertIn('Mr. Anderson', result.output)\n        self.assertIn('INWX', result.output)\n        self.assertIn('1st', result.output)\n        self.assertIn('30th', result.output)\n        self.assertIn('WEEKLY', result.output)\n        self.assertIn('MONTHLY', result.output)\n        self.assertIn('YEARLY', result.output)\n        self.assertIn('10/30/18', result.output)", "od": 0}
{"code": "def test_balance_cli(self):\n        from n26.cli import balance\n        result = self._run_cli_cmd(balance)\n        self.assertRegex(result.output, r\"\\d*\\.\\d* \\w*.*\")", "od": 0}
{"code": "def test_create_request_url(self):\n        from n26.util import create_request_url\n        expected = \"https://api.tech26.de?bar=baz&foo=bar\"\n        result = create_request_url(BASE_URL_DE, {\n            \"foo\": \"bar\",\n            \"bar\": \"baz\"\n        })\n        self.assertEqual(result, expected)", "od": 0}
{"code": "def test_do_request(self):\n        result = self._underTest._do_request(GET, \"/something\")\n        self.assertIsNotNone(result)", "od": 0}
{"code": "def test_get_token(self):\n        expected = '12345678-1234-1234-1234-123456789012'\n        api_client = api.Api(self.config)\n        result = api_client.get_token()\n        self.assertEqual(result, expected)", "od": 0}
{"code": "def test_refresh_token(self):\n        refresh_token = \"12345678-1234-abcd-abcd-1234567890ab\"\n        expected = \"12345678-1234-abcd-abcd-1234567890ab\"\n        result = self._underTest._refresh_token(refresh_token)\n        self.assertEqual(result['access_token'], expected)", "od": 0}
{"code": "def test_init_without_config(self):\n        api_client = api.Api()\n        self.assertIsNotNone(api_client.config)", "od": 0}
{"code": "def test_init_with_config(self):\n        from container_app_conf.source.yaml_source import YamlSource\n        conf = config.Config(singleton=False, data_sources=[\n            YamlSource(\"test_creds\", \"./tests/\")\n        ])\n        api_client = api.Api(conf)\n        self.assertIsNotNone(api_client.config)\n        self.assertEqual(api_client.config, conf)", "od": 0}
{"code": "def test_cards_cli(self):\n        from n26.cli import cards\n        result = self._run_cli_cmd(cards)\n        self.assertIn('MASTERCARD', result.output)\n        self.assertIn('MAESTRO', result.output)\n        self.assertIn('active', result.output)\n        self.assertIn('123456******1234', result.output)", "od": 0}
{"code": "def test_block_card_cli_single(self):\n        from n26.cli import card_block\n        card_id = \"12345678-1234-abcd-abcd-1234567890ab\"\n        result = self._run_cli_cmd(card_block, [\"--card\", card_id])\n        self.assertEqual(result.output, \"Blocked card: {}\\n\".format(card_id))", "od": 1}
{"code": "def test_block_card_cli_all(self):\n        from n26.cli import card_block\n        card_id_1 = \"12345678-1234-abcd-abcd-1234567890ab\"\n        card_id_2 = \"22345678-1234-abcd-abcd-1234567890ab\"\n\n        result = self._run_cli_cmd(card_block)\n        self.assertEqual(result.output, \"Blocked card: {}\\nBlocked card: {}\\n\".format(card_id_1, card_id_2))", "od": 1}
{"code": "def test_unblock_card_cli_single(self):\n        from n26.cli import card_unblock\n        card_id = \"12345678-1234-abcd-abcd-1234567890ab\"\n        result = self._run_cli_cmd(card_unblock, [\"--card\", card_id])\n        self.assertEqual(result.output, \"Unblocked card: {}\\n\".format(card_id))", "od": 1}
{"code": "def test_unblock_card_cli_all(self):\n        from n26.cli import card_unblock\n        card_id_1 = \"12345678-1234-abcd-abcd-1234567890ab\"\n        card_id_2 = \"22345678-1234-abcd-abcd-1234567890ab\"\n\n        result = self._run_cli_cmd(card_unblock)\n        self.assertEqual(result.output, \"Unblocked card: {}\\nUnblocked card: {}\\n\".format(card_id_1, card_id_2))", "od": 0}
{"code": "def test_get_account_info_cli(self):\n        from n26.cli import info\n        result = self._run_cli_cmd(info)\n        self.assertIsNotNone(result.output)", "od": 0}
{"code": "def test_get_account_statuses_cli(self):\n        from n26.cli import status\n        result = self._run_cli_cmd(status)\n        self.assertIn(\"PAIRED\", result.output)", "od": 0}
{"code": "def test_limits_cli(self):\n        from n26.cli import limits\n        result = self._run_cli_cmd(limits)\n        self.assertIn(\"POS_DAILY_ACCOUNT\", result.output)\n        self.assertIn(\"ATM_DAILY_ACCOUNT\", result.output)\n        self.assertIn(\"2500\", result.output)", "od": 0}
{"code": "def test_set_limits_cli(self):\n        from n26.cli import set_limits\n        result = self._run_cli_cmd(set_limits, [\"--withdrawal\", 2500, \"--payment\", 2500])\n        self.assertIn(\"POS_DAILY_ACCOUNT\", result.output)\n        self.assertIn(\"ATM_DAILY_ACCOUNT\", result.output)\n        self.assertIn(\"2500\", result.output)", "od": 0}
{"code": "def test_addresses_cli(self):\n        from n26.cli import addresses\n        result = self._run_cli_cmd(addresses)\n        self.assertIn(\"Einbahnstra\u00dfe\", result.output)\n        self.assertIn(\"SHIPPING\", result.output)\n        self.assertIn(\"PASSPORT\", result.output)\n        self.assertIn(\"LEGAL\", result.output)", "od": 0}
{"code": "def test_get_contacts(self):\n        result = self._underTest.get_contacts()\n        self.assertIsNotNone(result)", "od": 0}
{"code": "def test_contacts_cli(self):\n        from n26.cli import contacts\n        result = self._run_cli_cmd(contacts)\n        self.assertIn(\"ADAC\", result.output)\n        self.assertIn(\"Cyberport\", result.output)\n        self.assertIn(\"DB\", result.output)\n        self.assertIn(\"ELV\", result.output)\n        self.assertIn(\"Mindfactory\", result.output)\n        self.assertIn(\"Seegel\", result.output)", "od": 0}
{"code": "def test_get_statements_cli(self):\n        from n26.cli import statements\n        result = self._run_cli_cmd(statements)\n        self.assertIn(\"2016-11\", result.output)\n        self.assertIn(\"2017-01\", result.output)\n        self.assertIn(\"2018-01\", result.output)\n        self.assertIn(\"2019-01\", result.output)\n        self.assertIn(\"/api/statements/statement-2019-04\", result.output)\n        self.assertIn(\"1554076800000\", result.output)", "od": 0}
{"code": "def test_get_statements_by_id_cli(self):\n        from n26.cli import statements\n        result = self._run_cli_cmd(statements, [\"--id\", \"statement-2017-01\"])\n        self.assertEqual(len(result.output.split(\"\\n\")), 4)\n        self.assertNotIn(\"2016-11\", result.output)\n        self.assertIn(\"/api/statements/statement-2017-01\", result.output)\n        self.assertNotIn(\"2018-01\", result.output)\n        self.assertNotIn(\"2019-01\", result.output)\n        self.assertNotIn(\"1554076800000\", result.output)", "od": 0}
{"code": "def test_get_statements_by_date_cli(self):\n        from n26.cli import statements\n        result = self._run_cli_cmd(statements, [\"--from\", \"2017-01-01\", \"--to\", \"2017-04-01\"])\n        self.assertEqual(len(result.output.split(\"\\n\")), 7)\n        self.assertNotIn(\"2016-11\", result.output)\n        self.assertIn(\"/api/statements/statement-2017-01\", result.output)\n        self.assertIn(\"2017-02\", result.output)\n        self.assertIn(\"2017-03\", result.output)\n        self.assertIn(\"2017-04\", result.output)\n        self.assertNotIn(\"2018-01\", result.output)\n        self.assertNotIn(\"2019-01\", result.output)\n        self.assertNotIn(\"1554076800000\", result.output)", "od": 0}
{"code": "def test_get_statements_download_cli(self):\n        from filecmp import cmp\n        from glob import glob\n        from os import path\n        from tempfile import TemporaryDirectory\n        from n26.cli import statements\n        id = \"statement-2017-01\"\n        with TemporaryDirectory() as dir:\n            result = self._run_cli_cmd(statements, [\"--id\", id, \"--download\", dir])\n            self.assertIn(id, result.output)\n            files = glob(f\"{dir}/*.pdf\")\n            self.assertTrue(len(files) == 1)\n            directory = path.dirname(__file__)\n            file_path = path.join(directory, 'api_responses', 'statement.pdf')\n            self.assertTrue(cmp(file_path, files[0]))", "od": 0}
{"code": "def test_spaces_cli(self):\n        from n26.cli import spaces\n        result = self._run_cli_cmd(spaces)\n        self.assertRegex(result.output, r\"\\d*\\.\\d* \\w*.*\")", "od": 0}
